node {
  name: "net_input"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 29
        }
        dim {
          size: 13
        }
      }
    }
  }
}
node {
  name: "net/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\r\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "net/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.2866911
      }
    }
  }
}
node {
  name: "net/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.2866911
      }
    }
  }
}
node {
  name: "net/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "net/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 3334323
    }
  }
}
node {
  name: "net/random_uniform/sub"
  op: "Sub"
  input: "net/random_uniform/max"
  input: "net/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/random_uniform/mul"
  op: "Mul"
  input: "net/random_uniform/RandomUniform"
  input: "net/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/random_uniform"
  op: "Add"
  input: "net/random_uniform/mul"
  input: "net/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 13
        }
        dim {
          size: 60
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "net/kernel/Assign"
  op: "Assign"
  input: "net/kernel"
  input: "net/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "net/kernel/read"
  op: "Identity"
  input: "net/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/kernel"
      }
    }
  }
}
node {
  name: "net/recurrent_kernel/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
          dim {
            size: 60
          }
        }
        tensor_content: "\276\342\324=\227\304\354\273|\005>\276\335\217G\275c\335]\275\313\327\323\273\22326\276\315\002\030\276\023_\270=\347\353.=\244\343\321= \001\202\275\024m\031\275\266\211O\275\214\266\023;\212\2154\275\220r\032>\006\207\037=$\203c=\236\022\24497\322C>}\206\356\274V7\310>\303\365\006\275\242\317l=*\375\034\275\265V\363=\225N#\276\323\243\214\275\027\013 <\254O\273:\353\177\370\275l\235\226\276OE\025=\037@#>h\327\007=N\2376>R\302)\276\017\200\263=\271\312\220\274E\277\371\275\237\342\233\275\267\234V>\351a(\276\215\005\312\275\376\336\363;\333\352\245\275Qo\231>\372\246\342< \314\225=:\207\034>B\"\240\274,\345\311\275\2070\320=\n\2071>E\214\372\2755\244\033\276-\256\224\275s\361a\276Z\3104> ]\001>hh\000\273\276\266\331\274\202\332}\276O\354\313=\250s\361;\2037!\275\341q\003>\333\030\221\275\3211\340=\371\313\206=\375\326A>A\322L\275\177P\311\275\372K\267=U\276G\274\035\333\257=j\025u<\273\306\230<\335k)\275\337-w=\213\322\300\275\274\0209\276\205\000\316\275\327z\222>\206\336\265=\024Z\024\276\317\362\003=/{\004>*\233\321=H\261\'>\217\375\224\273\271\263\222\275(rR\276\376\215/=\334\r{\276\330\275\373\275M.\365<\310\316\336\275\346Q\201<3X\237>\224\n\247=\310\260\207<e\030\315\273vc\005\276\203\252\014>\270E\272\275R~\017\276\177\361\333=Q\357\230=h\244\314>\237/\226\275\364\320\314\275\356\207\236=\265h;\275Ehi\2766\273\245=\323!]\273;\336\220\274\250\'\026>2\0103=\233&\205\276\363\370\222\275\241\262\014\275*\315;\276\344\317\303=F\251\302=n<\227\274FhA=\306\241\205\276`o\323=!%\303\275\030\321\316=\355\026\004=\367%i=\356k\335\275\355(\306\274\266]\251=j\236O\276\231\017\374=\344\016.\273\032\345\213;2\251\007\275cx\216>>\305\222\275&B\026>\245\347\232=\354\243\343\275\376\256\322=\341\3525\275\356\351$=1\327,\276\232\242\027\2767fU\275\237\341\007\276\317\204\026\27695M\276T\217\236\275\216j)>\205\353\017\275\232A\200>\234F\374=T\342\327=\326\224\345\275\026S$>J\201c=W\325\026\273\367\260&=\324+\255=xJ \275\037\371\205\2765\276G\275t\026~\276\212\204\021\275v4\3139?CE=\016\304}>\215\214\367\275@\273\331<\000\255<>\3656\210\276K\276\330\274f\346C>3\026b<\237<\271=\355w\221\275\334\354\014\274\242=\206>\265\332\334=@\256\221=\361d2>>\212\265\275J`l\275|_O\276\036\n\244=\236*\222\276I\035\014\276\006\3750\276\3012\340\275}r@\276\271\320\304\273!\211\251=r\002\034\275\023\340\206\273]Z\225=y\263\"\275\250W_\276>\333\301\275\336\366\276=h\274\240\275|\332\305<\\\371\003\276\246&\010\276\331\313\336=\334x\224=y\232\225\273\"\223`\275\031\373P\276\240\260\310;\220\276u\275\327,=\276\233\236\177\275\352\030O\275\006\243\033\276gb5\274\264\017\240=xq,\275e\201\036=\304\016E>\321b\273=\250\337\337\27487\302=\331\304T\2732\035\222\273\363\030\'\276\365\337\001=\033\024?>S%\330\274\204n\204\276O\377\221\276\306Nt\274j\247\325<$\207\263\275\371\327\323\275\021s9\276\nLa>7\274\364\275\366\002\022>P\361\262\275\306\311\037\274\274\224\r\276G\200\002>\003\243\035=\202z\327\274qm\325\275\253\320\001>\321\010;\276\367<\334\274dr\326\275\027\310\'=lB\214=;i\332<PJm\276\024c)>m\237o>\240\244\305\275\211\367\210\274\3646\234=~\020\206\276!H\262=}\303\366\275\270&\264\275p<U<\021\240z\275\251\275:>\033\340\230\275\035\260\343\275_\222\330=\275\304&;\024\340q>?\235\234\276\246\347k\276\215\004\314\274<\262\266=\347\202\214=\355Mx>\323*Q\276 \232#>\357x\r\275\262\007\202<\025(\327\275\2542\266\274\307\257(=\236Z\304\275\020\331\311=\314a\340<\335\215\346=\373\226i\2749\275\361\275\350\006\027>\373-\303<\023\037\314\275\230:%\276\315Cv>E\306\255\274VV\333\274W\3065>\314\236 >UA~=\362t\201\275\030\273!\276\276\'\223=\376T\212=\331\310a\276Q\361\312<\314\360\030>\253\257\230=\354\267\030\276LfT>\320\261|=\330*I=\301\371\027\276<z\352\275\371\245,>*tm\275\330\324\026\273\237+\020=\nG2\276\276\027y>\322\272}>\274F(>0\375W\275\262\317\005\276\212*@=\013%\206\275\366\021\006\276\362O\206>\030y\020\276\002@\002\276[\330\270\275\032\373\024\276\362\267<\275\203r>\276\211\362\261=C^)\273\303\355\017=\024~\253\275\377\271\337\275\326!\353\275\342U\356=%\225\035\276\301\360C>\233\217\"<%\241\302<\264\272\036>\303\216l\276\3530\230<\374`\316<8\242_=\374\304]\267\007\330\361\275\230Of\273V\307=>\343\366-=\342*\241\275\346\345\237\273\212\2611>2_m\275\335\030->\036}\032\275\030\234o\274\350\240I>\n\361!\275\035\357\344\274\370+\375<LY\336\275\3152e\276\376\022\337\275Q\rD\275Qq\t>\225~H\276Tl)\275}\340\366=B\326H>\345\372\024=n\023\377=\204\346\373<\274\333\014>\334\322A\275A\021\227=\023p5\276\214\372\346\275\317\373\275<\336\313y\276(\007\247=\240{*\276\202\216G>\313\210\363=\326\031==\317\232v\276\2305.\274$\004-;\027\376-=\335\001\316=/\\\352\274\016\0177\275\t\316X<\007/\250>T\364\243\274k\2741=\230\246\004>>\304\022<\212\357\215=@\035A=*\341\235\276\332\270Q\2761\t(\276Qe\376\275\363\243(>\031\361\337;f\021\310=1\276\017=@\361\031>\271\027p\275\206\237\213;\177\031\330=\205\257\260=\316\r\r\276c/\341\275`\231\210\276K\336r\276u\334\367\274D\331Y\276_\n\005\275\371<\217\276\241\r\200\275\360\317\335=*\205\253\2748~\361\274H]A\276\225O\252\275\023\014\354\275\354@\025=\262\357\323<\213\270\235\273\3067\004=G7\365;\305!\204=\265\266\340\273F\334\206\276\327-g>\010\340\345<\223\211\225\276\206\3046\272JR\221\275\207\227E\276\\4\010>A\003k>H5+=\331\307M\276\272k\355\275\323\343\004\27617\232\275h\260\n\276\251/\201;\206?P=\3049\225=N>\233\275\264vi=\356\316\035>[\321\321=M\035\271\275\301\033->j\364L\276\250\317\027=f\336\016>N\000\274=Z,~=c\351\037\275\335vG=\302\230\307\274`\330?<b\244\027>\341J$\276\216\263\003\276\256Ta\276v\273\305=V\352\277=\303g\215>\0343#>\263\000\226\275\237\206\352\275\333\022\226>\276\260\213=\\\230\262\275\226\322\236\275\246j[>\030z\362=k\275\023\275\273\016D\275\260\234\301=\344\356\246=\221\364\306\275\224\000$=\336\212x>\364 \215=\004\334*>5\\\272\275\210U,\276\241\332W\274\016\216\222\274\231\335\005\276\350\340\345=\251\313Q=\331\330\257=\370\037\221\274yV\006\274\305\033\302=\210\350\023\274.S\255\276\346\031\004>\327\326O\2765\212\233\275\206Z\254\275\246\241\031=\0232\262<f]\333=J?\033\275\001\345\232\276,Vh\274\245+\262\274\342\361\251\275\267\003\373\274-\347\265\273/\361\007>\254\322\253\275I\320N=&\210A>j\036S\275\220\323\322\275\003B\364\275?\007\345\275\252q\013\276\245B\031\274\223\234\026>x\3333;\217\346k\274\27582>\210\270*>\302\220\227\275{\003\347=+\314\216\275\243\205\242=\227\000&>\344\256y\276\354x\n>\000\373+\275N\224\363\275\311v\261\273U\374D\276+!->\304\264\342\275)\256C\276E|\277\275\030\031\304\274\304\215#\276P\357\034>Q\205\207>?D%\276\250\340\257=\336\205\'>\t\206\024\275\366\217`\276\034E\322\275\025\006C=\303\010\346=\246aH\275av\034\276\235\017,>\257\\\032\275\260\023\245=v4<\274J\312\020>\242\027K=C\t\266\275)kr\276/\243\325=\212\314\366=\265(\244=\023\006\034\275\017~\014=b\355T>W\255\346=\301\236\275\275\227T\317\2756#\202\275f\033\360=t\036\366=q\352j>\304\025\223=\317\362]\275\212\306\013>9Pb\274\021VG>\325x\212\274\326d\241=\345\370H=>\243\247\275\2242X\276\302\003\204=\277\266T>\364\036\347\274W.s\274\355\360b\276n,1\276\264\206p\276\344\222\270=PE#\276\374(\003>\221o\010\276\315\300g=|\243\271<\267\202\010\276\342\r;>(\2539>]g\236=\213\324\216=\005\377O\275\350y\271\274\211\024t\276\265,\200\275oe\232\275\013\316\320=\214\005z>&\266\037>}&\240=\210\346\025=\223\323 <>bw\275\204\201\355<\r/c=\0008\262=\014[G\272\316\267j\274\001\316\207>]\021;\274e}\222=\n`U\274\334\006\312=\360L\223\276\307\237\240=\303\344\202=\314d\312=\253\215\256<#EM=>\213B\276\344\201\n\275\340\276\235\273T\225T>\330V\212>j\353\340\275*\231\026;\324\024p\275>\312\020\276\334\310\251\274/\342\355<\033\201\210\275\374Bc=\n\227\010>\326p7\275n\241\222\274\344.{\275\346K\204\275\310\"\336\274Y\363\363\275\257\375\324=\016\263\025\276B\317,\276\240\202T\275\352\210\"=\0329\254=\031v\273\275\371\021\034\276h\266\301\275\306\rh\276\314\237\">\271\r\301\276\3158\002\276\376\203\350=\000i \276\310wl=\215\260\t\276\267U\023=\304r#\274\250/\341=X\\\t>\346\217\201=v\257\014>\365\270\223\276\257|\253\275\300\275\t>\020\026\242\276\241M\210>H7{\275}\222\004<d\361/\276\321`\352\275\245\243?\274\371\251\033\275\255\352\221\274<\221\365\275\213B&\276\235\316q\275\230\020\271=\315z\301=/\231\034=&+8\276[\335\240\275\271?\373=\']\266=\3703\217<\036\\`\275\\\244\207\275\237\2541>\255>\205\275\034\270R\275\301_\204\276\301\033\261=\370\335\360<\nI\306\274ey\313\275\313y\251=h%\327\275\356\035u:\351\231\014=\230\n\250\274*\231\227\276\206P\370=\025\341\353=\330\221\322=\262\037M=\351\267\225<L\214h\276\266\006\000\276-\016\304=\212Z\313\275Ds\037>P\351H\2754\223?\275\227\357\273\276\204\031\241\275\307o\022\275)\373\247\275\240\326e\275\256\337!\274\211!\035\276\337\277\376=\337\367\022=D\271.\276\261J(\275\\x\016>{\220\237>\003}0>&\210l\275h\001\352\275\307 7=\307\236h>\312~\223=k\322\315\275\"\242\024=\206\346\324\275#\323\364<pq.>\003H\233=\203\344I>\323\216\205\275\366$\243=\\^\336\275\'\375\260\275\346\014?\276\371\224\247=\\\261\005>\253\201\\\276\222\371\262\275\026)\007\274\010\"\366\275Ll\344\274\371-7=\304\277\336\275:\214\247\275\233\202O\276\353tU\276Hb\217=\261=\037\275x(\177=G2\236<\360\233\232=\240\204\334\275\365$\026>\203\346&>+F\004>\340E\206>\366C\305\274\021S{<AN\221>K7g>ZW\205\276\372\256\351=\230\363A=(\200\276=\364\\n\274i\350\207\275\201\312S\275.\334\337<^\323\232\275\374I\361\275\324\013;>`F\354\274\237\266\006>\225\247n\275\337\013\223=\253\217\020=hc\357=\272k\307=>\000\222\274\211i\253\275\320\334\375=\216\2305=%\250c=<.\030\276\340\336\373\275I\362\356=t(N>\333\3533=\363Y\201\2761\037\215>\000\266o\275\326f\200=f\2014\276\246$\221=>`,\274\221\312\251\275\246\"F>\305\024P\276\352]Z\276C\307U>FB\350\273Q\305\370\275\037\201\257\275\273\013y\275\213\243\025=\227\371\220\274\334\226C=r\313\203\275K\356\322\274f\243\203\276\260\237\316<\177\001{>W\240\276=/\256\005>\366P\232\275\235\237\352=\3537\244\2762.\222\275\245\205\216\274p\255P\275J\r\213\274\201\003\306\275H\225\002=a\316 >u\030\243\275l\214^=\357ni\275\254\326\367\273\251h\371<\317Kd=\342B1>\305G\210\276\337\312\006>\3540\312=\275\277\255\273\217\352\340\274\270\316\340\274Y\234L\276\t\354Z\276\315\320\023\276\210\201\364\275b\236,\2758\301\265=i\376\355=\0354\247\275\355o\345\275\333\236\204>\033\260\241=\317u\206<\310\375\"\275\253W\002\276j\3361>M\217R>\347EG\274\311\360?>U\204l>\275C\314=\227\231{=I|\003=\305\207\367=\371k\223=S\311\345=\343Q\013>\032xN>\343\023\233=\204J\254<?P\310;\007:\365\273\035)\010\275\037\356\356\275\340\344\026\276hUJ9k6\024=\026\376\'\275\302\340C>\201\2027\275\226\312\266\275\216\010\210\275#\305N\275\t\241x>S\005\233>\2336\356\274\225\332u=G\'_>\345\016\265<\\\266F>u\334\204=\022[\335=N\300E=\370|B\275\365\217\223<\026\311B>\376\311U=\237\235$\276G\202\244\274mr\346<\254\323\257=\255\007\001>9<\371<\232k\310\2750P\222\275\256\'k=\321\214\251>\3336g>H.\275\275\263\256\350\274\254q\241<\360T5>\\\214\035>\033E\222>1\273\325=\346\370\363\275\223e\263\274\014\034}=5!q>\r[\306\275\255x<>\264`\n=\247\215\274<\210\004\002>,\2763=\005\250Q>\326\264\032\274\265\265P=_\017<=\211\314T\276t\231\226>-\0066\275\253\352\001=\361zY>\006\354z>\245\301\326={:\327\275@\222\226=o\273\232\275\320\260\337\274\344>\327=c#\027\276\302\264(>\007\205I\275l\017\376\275-\337\020>\225\202\333\274\314\336M\276\333\232s\275\341vO=\364;\360\275\366\204\371\275\206\255G>v\330\305=\375)\343=\331w\321=.\010\350\2758\003.\271\205:W\275\321[\307=v\241\224\275\2173\342\275\356\224\313=d\035\225=\266\364\n\275\266\032\306\274\316\3039>\003\322\007>\206qL\276\305\0045>H\331\217<\242\2662=\324\005t\275n\345S\275\316/\316\275\\$\223\276\013\227C>\013\001\320\274O\373n=pA\005>\2551\362\276\021w\327\275y\270\245<cx\366\272RD\353=w6:=_\021\033\275^t\373=+\007\324\273\311\262j\275\241[\306=\335,\201>\272\334\366\274\'\344\221\276\006\332\316\275\3725\376\275\270\351@\276F\342L>\215\246\312\275\241g\266\274\220i\277<\025\022:=6;e\275\020\340\020>\272\234\223\274e\010E>5\246\212=\337\310M\276\232\300\032\275\315=\205>\200\301\227;\321\232\355<\213\344*>\343\376\332\275_y\005>\246};\276\310\025\\<\370\243a=\300\342\025\275\320\227\310\275`\004\027\275\224|\224\275`\332\270=\226\026\225=\273\030E=\276\014m\275\245lD\272\226\256J>L\223\224=\244\003\234<\3360\217\275\256\337\236\275\232\r\332=a8\331\275\265\347\311<\214\341\330=\376\360\360=Al4\276\201^2\2763q\204\274X\3132\276E;/\276<\317\205\273\362\025\007>\234\362&>\245F\317=\034\355\025=\271k\350<\355$\\\276ds\017>~2\313=\217\2736\276\216\302\261=\216\347\003\276\022\215\030\275Fv1\275q\204\205=W9\005>6|\215=D1\200\274\224\331\312=u\261\006\276.\000\033\275*\177\223\276\213\247\221=He\273\275U\203\230\274;\336\301=\013\367/>f\267\221;_\035)\275,3\311\272\322\352\021>R\236$>$~b\275X\226,=\331\312[>c\222\010\276 \274-\274\203\177\007>Z>1>\267\232\315\274\336\221\220>\267\222\324=\354\351\177=T\350q\276@6\235\275\003n\221\275\006\022\262=y_`\276\210CF>\223\331r\275B\313\213\275\0234\232=\342\271\203\275/\341\226\276\016%\034=\301\215b\275/\312d\275\351\341\\>\2776\276\275\317\342\343=XB\243=\'\333\205>\177-s\274_U\">\370\006\204\276\034\014\205=\\\375F\275n\260%\276\260\356>>\321/\275\274\253[\026>\345\352\037=\"\002r\275+r\221\275\354\003_=\335\205\362\275\265\336>\276\377\322\217><O\000\274\030\306N=k\\\214\275Q\370\346\275\315\217%>i\314\013\275\333\317\266\275EA\361\275\244\022J>\336\356\351\275w\233o=\221\020\263\275R\303v\276\233\321\302\275j\374\220\275\217o\212<\263\300\005=\036\343\262\274\351\306\356=\\#5\276m^v\275P\3206\276u\354\200\274\002\203q\276!\273\356\275Gl\001>P\225F\276\263\206M>\035\265\364=\276\355N\273<\363\327\274nw]>,\373M\275\367.\245\274:F\260\274u\316\371\275\212\352\033\274\311\317J="
      }
    }
  }
}
node {
  name: "net/recurrent_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
        dim {
          size: 60
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "net/recurrent_kernel/Assign"
  op: "Assign"
  input: "net/recurrent_kernel"
  input: "net/recurrent_kernel/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "net/recurrent_kernel/read"
  op: "Identity"
  input: "net/recurrent_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/recurrent_kernel"
      }
    }
  }
}
node {
  name: "net/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 60
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "net/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 60
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "net/bias/Assign"
  op: "Assign"
  input: "net/bias"
  input: "net/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "net/bias/read"
  op: "Identity"
  input: "net/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/bias"
      }
    }
  }
}
node {
  name: "net/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "net/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\024\000\000\000"
      }
    }
  }
}
node {
  name: "net/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "net/strided_slice"
  op: "StridedSlice"
  input: "net/kernel/read"
  input: "net/strided_slice/stack"
  input: "net/strided_slice/stack_1"
  input: "net/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "net/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "net/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\024\000\000\000"
      }
    }
  }
}
node {
  name: "net/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "net/strided_slice_1"
  op: "StridedSlice"
  input: "net/recurrent_kernel/read"
  input: "net/strided_slice_1/stack"
  input: "net/strided_slice_1/stack_1"
  input: "net/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "net/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\024\000\000\000"
      }
    }
  }
}
node {
  name: "net/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000(\000\000\000"
      }
    }
  }
}
node {
  name: "net/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "net/strided_slice_2"
  op: "StridedSlice"
  input: "net/kernel/read"
  input: "net/strided_slice_2/stack"
  input: "net/strided_slice_2/stack_1"
  input: "net/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "net/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\024\000\000\000"
      }
    }
  }
}
node {
  name: "net/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000(\000\000\000"
      }
    }
  }
}
node {
  name: "net/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "net/strided_slice_3"
  op: "StridedSlice"
  input: "net/recurrent_kernel/read"
  input: "net/strided_slice_3/stack"
  input: "net/strided_slice_3/stack_1"
  input: "net/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "net/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000(\000\000\000"
      }
    }
  }
}
node {
  name: "net/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "net/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "net/strided_slice_4"
  op: "StridedSlice"
  input: "net/kernel/read"
  input: "net/strided_slice_4/stack"
  input: "net/strided_slice_4/stack_1"
  input: "net/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "net/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000(\000\000\000"
      }
    }
  }
}
node {
  name: "net/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "net/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "net/strided_slice_5"
  op: "StridedSlice"
  input: "net/recurrent_kernel/read"
  input: "net/strided_slice_5/stack"
  input: "net/strided_slice_5/stack_1"
  input: "net/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "net/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "net/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 20
      }
    }
  }
}
node {
  name: "net/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "net/strided_slice_6"
  op: "StridedSlice"
  input: "net/bias/read"
  input: "net/strided_slice_6/stack"
  input: "net/strided_slice_6/stack_1"
  input: "net/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "net/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 20
      }
    }
  }
}
node {
  name: "net/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 40
      }
    }
  }
}
node {
  name: "net/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "net/strided_slice_7"
  op: "StridedSlice"
  input: "net/bias/read"
  input: "net/strided_slice_7/stack"
  input: "net/strided_slice_7/stack_1"
  input: "net/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "net/strided_slice_8/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 40
      }
    }
  }
}
node {
  name: "net/strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "net/strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "net/strided_slice_8"
  op: "StridedSlice"
  input: "net/bias/read"
  input: "net/strided_slice_8/stack"
  input: "net/strided_slice_8/stack_1"
  input: "net/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "net/zeros_like"
  op: "ZerosLike"
  input: "net_input"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "net/Sum"
  op: "Sum"
  input: "net/zeros_like"
  input: "net/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "net/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "net/ExpandDims"
  op: "ExpandDims"
  input: "net/Sum"
  input: "net/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "net/Tile/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\024\000\000\000"
      }
    }
  }
}
node {
  name: "net/Tile"
  op: "Tile"
  input: "net/ExpandDims"
  input: "net/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "net/transpose/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "net/transpose"
  op: "Transpose"
  input: "net_input"
  input: "net/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "net/Shape"
  op: "Shape"
  input: "net/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "net/strided_slice_9/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "net/strided_slice_9/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "net/strided_slice_9/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "net/strided_slice_9"
  op: "StridedSlice"
  input: "net/Shape"
  input: "net/strided_slice_9/stack"
  input: "net/strided_slice_9/stack_1"
  input: "net/strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "net/strided_slice_10/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "net/strided_slice_10/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "net/strided_slice_10/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "net/strided_slice_10"
  op: "StridedSlice"
  input: "net/transpose"
  input: "net/strided_slice_10/stack"
  input: "net/strided_slice_10/stack_1"
  input: "net/strided_slice_10/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "net/ones_like/Shape"
  op: "Shape"
  input: "net/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "net/ones_like/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "net/ones_like"
  op: "Fill"
  input: "net/ones_like/Shape"
  input: "net/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "net/mul"
  op: "Mul"
  input: "net/strided_slice_10"
  input: "net/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/mul_1"
  op: "Mul"
  input: "net/strided_slice_10"
  input: "net/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/mul_2"
  op: "Mul"
  input: "net/strided_slice_10"
  input: "net/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/MatMul"
  op: "MatMul"
  input: "net/mul"
  input: "net/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "net/MatMul_1"
  op: "MatMul"
  input: "net/mul_1"
  input: "net/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "net/MatMul_2"
  op: "MatMul"
  input: "net/mul_2"
  input: "net/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "net/BiasAdd"
  op: "BiasAdd"
  input: "net/MatMul"
  input: "net/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "net/BiasAdd_1"
  op: "BiasAdd"
  input: "net/MatMul_1"
  input: "net/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "net/BiasAdd_2"
  op: "BiasAdd"
  input: "net/MatMul_2"
  input: "net/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "net/MatMul_3"
  op: "MatMul"
  input: "net/Tile"
  input: "net/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "net/MatMul_4"
  op: "MatMul"
  input: "net/Tile"
  input: "net/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "net/add"
  op: "Add"
  input: "net/BiasAdd"
  input: "net/MatMul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/mul_3/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.2
      }
    }
  }
}
node {
  name: "net/mul_3"
  op: "Mul"
  input: "net/mul_3/x"
  input: "net/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/add_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "net/add_1"
  op: "Add"
  input: "net/mul_3"
  input: "net/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "net/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "net/clip_by_value/Minimum"
  op: "Minimum"
  input: "net/add_1"
  input: "net/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/clip_by_value"
  op: "Maximum"
  input: "net/clip_by_value/Minimum"
  input: "net/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/add_2"
  op: "Add"
  input: "net/BiasAdd_1"
  input: "net/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/mul_4/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.2
      }
    }
  }
}
node {
  name: "net/mul_4"
  op: "Mul"
  input: "net/mul_4/x"
  input: "net/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/add_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "net/add_3"
  op: "Add"
  input: "net/mul_4"
  input: "net/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "net/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "net/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "net/add_3"
  input: "net/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/clip_by_value_1"
  op: "Maximum"
  input: "net/clip_by_value_1/Minimum"
  input: "net/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/mul_5"
  op: "Mul"
  input: "net/clip_by_value_1"
  input: "net/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/MatMul_5"
  op: "MatMul"
  input: "net/mul_5"
  input: "net/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "net/add_4"
  op: "Add"
  input: "net/BiasAdd_2"
  input: "net/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/mul_6"
  op: "Mul"
  input: "net/clip_by_value"
  input: "net/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "net/sub"
  op: "Sub"
  input: "net/sub/x"
  input: "net/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/mul_7"
  op: "Mul"
  input: "net/sub"
  input: "net/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/add_5"
  op: "Add"
  input: "net/mul_6"
  input: "net/mul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/TensorArray"
  op: "TensorArrayV3"
  input: "net/strided_slice_9"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "output_ta"
    }
  }
}
node {
  name: "net/zeros_like_1"
  op: "ZerosLike"
  input: "net/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/TensorArray_1"
  op: "TensorArrayV3"
  input: "net/strided_slice_9"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "input_ta"
    }
  }
}
node {
  name: "net/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "net/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "net/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "net/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "net/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "net/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "net/TensorArrayUnstack/Shape"
  input: "net/TensorArrayUnstack/strided_slice/stack"
  input: "net/TensorArrayUnstack/strided_slice/stack_1"
  input: "net/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "net/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "net/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "net/TensorArrayUnstack/range"
  op: "Range"
  input: "net/TensorArrayUnstack/range/start"
  input: "net/TensorArrayUnstack/strided_slice"
  input: "net/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "net/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "net/TensorArray_1"
  input: "net/TensorArrayUnstack/range"
  input: "net/transpose"
  input: "net/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/transpose"
      }
    }
  }
}
node {
  name: "net/time"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "net/while/maximum_iterations"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 29
      }
    }
  }
}
node {
  name: "net/while/iteration_counter"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "net/while/Enter"
  op: "Enter"
  input: "net/while/iteration_counter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "net/while/Enter_1"
  op: "Enter"
  input: "net/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "net/while/Enter_2"
  op: "Enter"
  input: "net/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "net/while/Enter_3"
  op: "Enter"
  input: "net/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "net/while/Merge"
  op: "Merge"
  input: "net/while/Enter"
  input: "net/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "net/while/Merge_1"
  op: "Merge"
  input: "net/while/Enter_1"
  input: "net/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "net/while/Merge_2"
  op: "Merge"
  input: "net/while/Enter_2"
  input: "net/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/Merge_3"
  op: "Merge"
  input: "net/while/Enter_3"
  input: "net/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/Less"
  op: "Less"
  input: "net/while/Merge"
  input: "net/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "net/while/Less/Enter"
  op: "Enter"
  input: "net/while/maximum_iterations"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "net/while/Less_1"
  op: "Less"
  input: "net/while/Merge_1"
  input: "net/while/Less_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "net/while/Less_1/Enter"
  op: "Enter"
  input: "net/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "net/while/LogicalAnd"
  op: "LogicalAnd"
  input: "net/while/Less"
  input: "net/while/Less_1"
}
node {
  name: "net/while/LoopCond"
  op: "LoopCond"
  input: "net/while/LogicalAnd"
}
node {
  name: "net/while/Switch"
  op: "Switch"
  input: "net/while/Merge"
  input: "net/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Merge"
      }
    }
  }
}
node {
  name: "net/while/Switch_1"
  op: "Switch"
  input: "net/while/Merge_1"
  input: "net/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Merge_1"
      }
    }
  }
}
node {
  name: "net/while/Switch_2"
  op: "Switch"
  input: "net/while/Merge_2"
  input: "net/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Merge_2"
      }
    }
  }
}
node {
  name: "net/while/Switch_3"
  op: "Switch"
  input: "net/while/Merge_3"
  input: "net/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Merge_3"
      }
    }
  }
}
node {
  name: "net/while/Identity"
  op: "Identity"
  input: "net/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "net/while/Identity_1"
  op: "Identity"
  input: "net/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "net/while/Identity_2"
  op: "Identity"
  input: "net/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/Identity_3"
  op: "Identity"
  input: "net/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/add/y"
  op: "Const"
  input: "^net/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "net/while/add"
  op: "Add"
  input: "net/while/Identity"
  input: "net/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "net/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "net/while/TensorArrayReadV3/Enter"
  input: "net/while/Identity_1"
  input: "net/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "net/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "net/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "net/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "net/while/mul"
  op: "Mul"
  input: "net/while/TensorArrayReadV3"
  input: "net/while/mul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/mul/Enter"
  op: "Enter"
  input: "net/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "net/while/mul_1"
  op: "Mul"
  input: "net/while/TensorArrayReadV3"
  input: "net/while/mul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/mul_2"
  op: "Mul"
  input: "net/while/TensorArrayReadV3"
  input: "net/while/mul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/MatMul"
  op: "MatMul"
  input: "net/while/mul"
  input: "net/while/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "net/while/MatMul/Enter"
  op: "Enter"
  input: "net/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "net/while/MatMul_1"
  op: "MatMul"
  input: "net/while/mul_1"
  input: "net/while/MatMul_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "net/while/MatMul_1/Enter"
  op: "Enter"
  input: "net/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "net/while/MatMul_2"
  op: "MatMul"
  input: "net/while/mul_2"
  input: "net/while/MatMul_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "net/while/MatMul_2/Enter"
  op: "Enter"
  input: "net/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "net/while/BiasAdd"
  op: "BiasAdd"
  input: "net/while/MatMul"
  input: "net/while/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "net/while/BiasAdd/Enter"
  op: "Enter"
  input: "net/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "net/while/BiasAdd_1"
  op: "BiasAdd"
  input: "net/while/MatMul_1"
  input: "net/while/BiasAdd_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "net/while/BiasAdd_1/Enter"
  op: "Enter"
  input: "net/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "net/while/BiasAdd_2"
  op: "BiasAdd"
  input: "net/while/MatMul_2"
  input: "net/while/BiasAdd_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "net/while/BiasAdd_2/Enter"
  op: "Enter"
  input: "net/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "net/while/MatMul_3"
  op: "MatMul"
  input: "net/while/Identity_3"
  input: "net/while/MatMul_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "net/while/MatMul_3/Enter"
  op: "Enter"
  input: "net/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "net/while/MatMul_4"
  op: "MatMul"
  input: "net/while/Identity_3"
  input: "net/while/MatMul_4/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "net/while/MatMul_4/Enter"
  op: "Enter"
  input: "net/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "net/while/add_1"
  op: "Add"
  input: "net/while/BiasAdd"
  input: "net/while/MatMul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/mul_3/x"
  op: "Const"
  input: "^net/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.2
      }
    }
  }
}
node {
  name: "net/while/mul_3"
  op: "Mul"
  input: "net/while/mul_3/x"
  input: "net/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/add_2/y"
  op: "Const"
  input: "^net/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "net/while/add_2"
  op: "Add"
  input: "net/while/mul_3"
  input: "net/while/add_2/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/Const"
  op: "Const"
  input: "^net/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "net/while/Const_1"
  op: "Const"
  input: "^net/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "net/while/clip_by_value/Minimum"
  op: "Minimum"
  input: "net/while/add_2"
  input: "net/while/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/clip_by_value"
  op: "Maximum"
  input: "net/while/clip_by_value/Minimum"
  input: "net/while/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/add_3"
  op: "Add"
  input: "net/while/BiasAdd_1"
  input: "net/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/mul_4/x"
  op: "Const"
  input: "^net/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.2
      }
    }
  }
}
node {
  name: "net/while/mul_4"
  op: "Mul"
  input: "net/while/mul_4/x"
  input: "net/while/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/add_4/y"
  op: "Const"
  input: "^net/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "net/while/add_4"
  op: "Add"
  input: "net/while/mul_4"
  input: "net/while/add_4/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/Const_2"
  op: "Const"
  input: "^net/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "net/while/Const_3"
  op: "Const"
  input: "^net/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "net/while/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "net/while/add_4"
  input: "net/while/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/clip_by_value_1"
  op: "Maximum"
  input: "net/while/clip_by_value_1/Minimum"
  input: "net/while/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/mul_5"
  op: "Mul"
  input: "net/while/clip_by_value_1"
  input: "net/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/MatMul_5"
  op: "MatMul"
  input: "net/while/mul_5"
  input: "net/while/MatMul_5/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "net/while/MatMul_5/Enter"
  op: "Enter"
  input: "net/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "net/while/add_5"
  op: "Add"
  input: "net/while/BiasAdd_2"
  input: "net/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/mul_6"
  op: "Mul"
  input: "net/while/clip_by_value"
  input: "net/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/sub/x"
  op: "Const"
  input: "^net/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "net/while/sub"
  op: "Sub"
  input: "net/while/sub/x"
  input: "net/while/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/mul_7"
  op: "Mul"
  input: "net/while/sub"
  input: "net/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/add_6"
  op: "Add"
  input: "net/while/mul_6"
  input: "net/while/mul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "net/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "net/while/Identity_1"
  input: "net/while/add_6"
  input: "net/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_6"
      }
    }
  }
}
node {
  name: "net/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "net/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "net/while/add_7/y"
  op: "Const"
  input: "^net/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "net/while/add_7"
  op: "Add"
  input: "net/while/Identity_1"
  input: "net/while/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "net/while/NextIteration"
  op: "NextIteration"
  input: "net/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "net/while/NextIteration_1"
  op: "NextIteration"
  input: "net/while/add_7"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "net/while/NextIteration_2"
  op: "NextIteration"
  input: "net/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/NextIteration_3"
  op: "NextIteration"
  input: "net/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/Exit"
  op: "Exit"
  input: "net/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "net/while/Exit_1"
  op: "Exit"
  input: "net/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "net/while/Exit_2"
  op: "Exit"
  input: "net/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/Exit_3"
  op: "Exit"
  input: "net/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "net/TensorArray"
  input: "net/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/TensorArray"
      }
    }
  }
}
node {
  name: "net/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "net/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "net/TensorArrayStack/range"
  op: "Range"
  input: "net/TensorArrayStack/range/start"
  input: "net/TensorArrayStack/TensorArraySizeV3"
  input: "net/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/TensorArray"
      }
    }
  }
}
node {
  name: "net/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "net/TensorArray"
  input: "net/TensorArrayStack/range"
  input: "net/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 20
        }
      }
    }
  }
}
node {
  name: "net/sub_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "net/sub_1"
  op: "Sub"
  input: "net/while/Exit_1"
  input: "net/sub_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "net/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "net/TensorArray"
  input: "net/sub_1"
  input: "net/while/Exit_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/transpose_1/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "net/transpose_1"
  op: "Transpose"
  input: "net/TensorArrayStack/TensorArrayGatherV3"
  input: "net/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dense_1/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\024\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dense_1/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.53452247
      }
    }
  }
}
node {
  name: "dense_1/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.53452247
      }
    }
  }
}
node {
  name: "dense_1/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dense_1/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 626188
    }
  }
}
node {
  name: "dense_1/random_uniform/sub"
  op: "Sub"
  input: "dense_1/random_uniform/max"
  input: "dense_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/random_uniform/mul"
  op: "Mul"
  input: "dense_1/random_uniform/RandomUniform"
  input: "dense_1/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/random_uniform"
  op: "Add"
  input: "dense_1/random_uniform/mul"
  input: "dense_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_1/kernel/Assign"
  op: "Assign"
  input: "dense_1/kernel"
  input: "dense_1/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_1/kernel/read"
  op: "Identity"
  input: "dense_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
}
node {
  name: "dense_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_1/bias/Assign"
  op: "Assign"
  input: "dense_1/bias"
  input: "dense_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_1/bias/read"
  op: "Identity"
  input: "dense_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
}
node {
  name: "dense_1/MatMul"
  op: "MatMul"
  input: "net/TensorArrayReadV3"
  input: "dense_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense_1/BiasAdd"
  op: "BiasAdd"
  input: "dense_1/MatMul"
  input: "dense_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dense_1/Sigmoid"
  op: "Sigmoid"
  input: "dense_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 13
        }
        dim {
          size: 60
        }
      }
    }
  }
}
node {
  name: "Assign"
  op: "Assign"
  input: "net/kernel"
  input: "Placeholder"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_1"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
        dim {
          size: 60
        }
      }
    }
  }
}
node {
  name: "Assign_1"
  op: "Assign"
  input: "net/recurrent_kernel"
  input: "Placeholder_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_2"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 60
        }
      }
    }
  }
}
node {
  name: "Assign_2"
  op: "Assign"
  input: "net/bias"
  input: "Placeholder_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_3"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_3"
  op: "Assign"
  input: "dense_1/kernel"
  input: "Placeholder_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_4"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_4"
  op: "Assign"
  input: "dense_1/bias"
  input: "Placeholder_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "net/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "net/recurrent_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/recurrent_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "net/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "dense_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "dense_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^dense_1/bias/Assign"
  input: "^dense_1/kernel/Assign"
  input: "^net/bias/Assign"
  input: "^net/kernel/Assign"
  input: "^net/recurrent_kernel/Assign"
}
node {
  name: "RMSprop/lr/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.001
      }
    }
  }
}
node {
  name: "RMSprop/lr"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "RMSprop/lr/Assign"
  op: "Assign"
  input: "RMSprop/lr"
  input: "RMSprop/lr/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/lr"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "RMSprop/lr/read"
  op: "Identity"
  input: "RMSprop/lr"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/lr"
      }
    }
  }
}
node {
  name: "RMSprop/rho/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.89999998
      }
    }
  }
}
node {
  name: "RMSprop/rho"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "RMSprop/rho/Assign"
  op: "Assign"
  input: "RMSprop/rho"
  input: "RMSprop/rho/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/rho"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "RMSprop/rho/read"
  op: "Identity"
  input: "RMSprop/rho"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/rho"
      }
    }
  }
}
node {
  name: "RMSprop/decay/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "RMSprop/decay"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "RMSprop/decay/Assign"
  op: "Assign"
  input: "RMSprop/decay"
  input: "RMSprop/decay/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/decay"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "RMSprop/decay/read"
  op: "Identity"
  input: "RMSprop/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/decay"
      }
    }
  }
}
node {
  name: "RMSprop/iterations/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "RMSprop/iterations"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "RMSprop/iterations/Assign"
  op: "Assign"
  input: "RMSprop/iterations"
  input: "RMSprop/iterations/initial_value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/iterations"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "RMSprop/iterations/read"
  op: "Identity"
  input: "RMSprop/iterations"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/iterations"
      }
    }
  }
}
node {
  name: "dense_1_target"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "dense_1_sample_weights"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "loss/dense_1_loss/add/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "loss/dense_1_loss/add"
  op: "Add"
  input: "loss/dense_1_loss/add/x"
  input: "dense_1_target"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_1_loss/Neg"
  op: "Neg"
  input: "loss/dense_1_loss/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_1_loss/add_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "loss/dense_1_loss/add_1"
  op: "Add"
  input: "loss/dense_1_loss/add_1/x"
  input: "dense_1/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_1_loss/add_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1e-07
      }
    }
  }
}
node {
  name: "loss/dense_1_loss/add_2"
  op: "Add"
  input: "loss/dense_1_loss/add_1"
  input: "loss/dense_1_loss/add_2/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_1_loss/Log"
  op: "Log"
  input: "loss/dense_1_loss/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_1_loss/mul"
  op: "Mul"
  input: "loss/dense_1_loss/Neg"
  input: "loss/dense_1_loss/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_1_loss/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/dense_1_loss/sub"
  op: "Sub"
  input: "loss/dense_1_loss/sub/x"
  input: "dense_1_target"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_1_loss/Neg_1"
  op: "Neg"
  input: "loss/dense_1_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_1_loss/sub_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/dense_1_loss/sub_1"
  op: "Sub"
  input: "loss/dense_1_loss/sub_1/x"
  input: "dense_1/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_1_loss/add_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1e-07
      }
    }
  }
}
node {
  name: "loss/dense_1_loss/add_3"
  op: "Add"
  input: "loss/dense_1_loss/sub_1"
  input: "loss/dense_1_loss/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_1_loss/Log_1"
  op: "Log"
  input: "loss/dense_1_loss/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_1_loss/mul_1"
  op: "Mul"
  input: "loss/dense_1_loss/Neg_1"
  input: "loss/dense_1_loss/Log_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_1_loss/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "loss/dense_1_loss/Mean"
  op: "Mean"
  input: "loss/dense_1_loss/mul_1"
  input: "loss/dense_1_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/dense_1_loss/mul_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.89999998
      }
    }
  }
}
node {
  name: "loss/dense_1_loss/mul_2"
  op: "Mul"
  input: "loss/dense_1_loss/mul_2/x"
  input: "loss/dense_1_loss/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_1_loss/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "loss/dense_1_loss/Mean_1"
  op: "Mean"
  input: "loss/dense_1_loss/mul"
  input: "loss/dense_1_loss/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/dense_1_loss/mul_3/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.1
      }
    }
  }
}
node {
  name: "loss/dense_1_loss/mul_3"
  op: "Mul"
  input: "loss/dense_1_loss/mul_3/x"
  input: "loss/dense_1_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_1_loss/add_4"
  op: "Add"
  input: "loss/dense_1_loss/mul_2"
  input: "loss/dense_1_loss/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_1_loss/Mean_2/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "loss/dense_1_loss/Mean_2"
  op: "Mean"
  input: "loss/dense_1_loss/add_4"
  input: "loss/dense_1_loss/Mean_2/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/dense_1_loss/mul_4"
  op: "Mul"
  input: "loss/dense_1_loss/Mean_2"
  input: "dense_1_sample_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_1_loss/NotEqual/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "loss/dense_1_loss/NotEqual"
  op: "NotEqual"
  input: "dense_1_sample_weights"
  input: "loss/dense_1_loss/NotEqual/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_1_loss/Cast"
  op: "Cast"
  input: "loss/dense_1_loss/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "loss/dense_1_loss/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/dense_1_loss/Mean_3"
  op: "Mean"
  input: "loss/dense_1_loss/Cast"
  input: "loss/dense_1_loss/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/dense_1_loss/truediv"
  op: "RealDiv"
  input: "loss/dense_1_loss/mul_4"
  input: "loss/dense_1_loss/Mean_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_1_loss/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/dense_1_loss/Mean_4"
  op: "Mean"
  input: "loss/dense_1_loss/truediv"
  input: "loss/dense_1_loss/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/mul"
  op: "Mul"
  input: "loss/mul/x"
  input: "loss/dense_1_loss/Mean_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/acc/Round"
  op: "Round"
  input: "dense_1/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/acc/Equal"
  op: "Equal"
  input: "dense_1_target"
  input: "metrics/acc/Round"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/acc/Cast"
  op: "Cast"
  input: "metrics/acc/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "metrics/acc/Mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "metrics/acc/Mean"
  op: "Mean"
  input: "metrics/acc/Cast"
  input: "metrics/acc/Mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "metrics/acc/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "metrics/acc/Mean_1"
  op: "Mean"
  input: "metrics/acc/Mean"
  input: "metrics/acc/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/grad_ys_0"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Fill"
  op: "Fill"
  input: "training/RMSprop/gradients/Shape"
  input: "training/RMSprop/gradients/grad_ys_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/mul"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/f_count"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Exit_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/f_count_1"
  op: "Enter"
  input: "training/RMSprop/gradients/f_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/Merge"
  op: "Merge"
  input: "training/RMSprop/gradients/f_count_1"
  input: "training/RMSprop/gradients/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/Merge"
  input: "net/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Add/y"
  op: "Const"
  input: "^net/while/Identity"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Exit_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Add"
  op: "Add"
  input: "training/RMSprop/gradients/Switch:1"
  input: "training/RMSprop/gradients/Add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/Add"
  input: "^training/RMSprop/gradients/net/while/MatMul_1_grad/MatMul_1/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/MatMul_2_grad/MatMul_1/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/MatMul_5_grad/MatMul_1/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/MatMul_grad/MatMul_1/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/RMSprop/gradients/net/while/add_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/RMSprop/gradients/net/while/add_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/RMSprop/gradients/net/while/add_6_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/add_6_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/clip_by_value_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/clip_by_value_grad/GreaterEqual/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/mul_3_grad/Mul/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/mul_4_grad/Mul/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/RMSprop/gradients/net/while/mul_5_grad/Mul_1/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/RMSprop/gradients/net/while/mul_6_grad/Mul/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/mul_6_grad/Mul_1/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/RMSprop/gradients/net/while/mul_7_grad/Mul/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/mul_7_grad/Mul_1/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/sub_grad/BroadcastGradientArgs/StackPushV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/f_count_2"
  op: "Exit"
  input: "training/RMSprop/gradients/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/b_count"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Exit_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/b_count_1"
  op: "Enter"
  input: "training/RMSprop/gradients/f_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/Merge_1"
  op: "Merge"
  input: "training/RMSprop/gradients/b_count_1"
  input: "training/RMSprop/gradients/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/GreaterEqual"
  op: "GreaterEqual"
  input: "training/RMSprop/gradients/Merge_1"
  input: "training/RMSprop/gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/GreaterEqual/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/b_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/b_count_2"
  op: "LoopCond"
  input: "training/RMSprop/gradients/GreaterEqual"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Switch_1"
  op: "Switch"
  input: "training/RMSprop/gradients/Merge_1"
  input: "training/RMSprop/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Sub"
  op: "Sub"
  input: "training/RMSprop/gradients/Switch_1:1"
  input: "training/RMSprop/gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/NextIteration_1"
  op: "NextIteration"
  input: "training/RMSprop/gradients/Sub"
  input: "^training/RMSprop/gradients/net/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/b_count_3"
  op: "Exit"
  input: "training/RMSprop/gradients/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/mul_grad/Mul"
  op: "Mul"
  input: "training/RMSprop/gradients/Fill"
  input: "loss/dense_1_loss/Mean_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/mul_grad/Mul_1"
  op: "Mul"
  input: "training/RMSprop/gradients/Fill"
  input: "loss/mul/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/loss/mul_grad/Mul_1"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/Shape"
  op: "Shape"
  input: "loss/dense_1_loss/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/Tile"
  op: "Tile"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/Shape_1"
  op: "Shape"
  input: "loss/dense_1_loss/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/Shape_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/Prod"
  op: "Prod"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/Shape_1"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/Prod_1"
  op: "Prod"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/Shape_2"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/Maximum"
  op: "Maximum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/Prod_1"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/floordiv"
  op: "FloorDiv"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/Prod"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/Cast"
  op: "Cast"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/floordiv"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/truediv"
  op: "RealDiv"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/Tile"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/Shape"
  op: "Shape"
  input: "loss/dense_1_loss/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/truediv"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/truediv"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/Shape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/truediv"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/RealDiv"
  op: "RealDiv"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/truediv"
  input: "loss/dense_1_loss/Mean_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/truediv"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/RealDiv"
  input: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/truediv"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/Sum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/truediv"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/Neg"
  op: "Neg"
  input: "loss/dense_1_loss/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/truediv"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/RealDiv_1"
  op: "RealDiv"
  input: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/Neg"
  input: "loss/dense_1_loss/Mean_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/truediv"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/RealDiv_2"
  op: "RealDiv"
  input: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/RealDiv_1"
  input: "loss/dense_1_loss/Mean_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/truediv"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/mul"
  op: "Mul"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/truediv"
  input: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/truediv"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/mul"
  input: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/truediv"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/Sum_1"
  input: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/truediv"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_4_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_4_grad/Shape_1"
  op: "Shape"
  input: "dense_1_sample_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_4_grad/Shape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_4_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_4_grad/Mul"
  op: "Mul"
  input: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/Reshape"
  input: "dense_1_sample_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_4_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_4_grad/Mul"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_4_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_4_grad/Sum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_4_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_4_grad/Mul_1"
  op: "Mul"
  input: "loss/dense_1_loss/Mean_2"
  input: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_4_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_4_grad/Mul_1"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_4_grad/Sum_1"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_4_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_2_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_2_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_4_grad/Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_2_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_2_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_2_grad/Tile"
  op: "Tile"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_2_grad/Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_2_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_2_grad/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_2_grad/truediv"
  op: "RealDiv"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_2_grad/Tile"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_2_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_2_grad/Mul"
  op: "Mul"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_2_grad/truediv"
  input: "loss/dense_1_loss/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_2_grad/Mul_1"
  op: "Mul"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_2_grad/truediv"
  input: "loss/dense_1_loss/mul_2/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_3_grad/Mul"
  op: "Mul"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_2_grad/truediv"
  input: "loss/dense_1_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_3_grad/Mul_1"
  op: "Mul"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_2_grad/truediv"
  input: "loss/dense_1_loss/mul_3/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_2_grad/Mul_1"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/Shape"
  op: "Shape"
  input: "loss/dense_1_loss/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/Tile"
  op: "Tile"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/Shape_1"
  op: "Shape"
  input: "loss/dense_1_loss/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/Shape_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/Prod"
  op: "Prod"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/Shape_1"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/Prod_1"
  op: "Prod"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/Shape_2"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/Maximum"
  op: "Maximum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/Prod_1"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/floordiv"
  op: "FloorDiv"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/Prod"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/Cast"
  op: "Cast"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/floordiv"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/truediv"
  op: "RealDiv"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/Tile"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_3_grad/Mul_1"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/Shape"
  op: "Shape"
  input: "loss/dense_1_loss/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/Tile"
  op: "Tile"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/Shape_1"
  op: "Shape"
  input: "loss/dense_1_loss/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/Shape_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/Prod"
  op: "Prod"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/Shape_1"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/Prod_1"
  op: "Prod"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/Shape_2"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/Maximum"
  op: "Maximum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/Prod_1"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/floordiv"
  op: "FloorDiv"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/Prod"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/Cast"
  op: "Cast"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/floordiv"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/truediv"
  op: "RealDiv"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/Tile"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_1_grad/Shape"
  op: "Shape"
  input: "loss/dense_1_loss/Neg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_1_grad/Shape_1"
  op: "Shape"
  input: "loss/dense_1_loss/Log_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_1_grad/Shape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_1_grad/Mul"
  op: "Mul"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/truediv"
  input: "loss/dense_1_loss/Log_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_1_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_1_grad/Mul"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_1_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_1_grad/Sum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_1_grad/Mul_1"
  op: "Mul"
  input: "loss/dense_1_loss/Neg_1"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_1_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_1_grad/Mul_1"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_1_grad/Sum_1"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_grad/Shape"
  op: "Shape"
  input: "loss/dense_1_loss/Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_grad/Shape_1"
  op: "Shape"
  input: "loss/dense_1_loss/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_grad/Shape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_grad/Mul"
  op: "Mul"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/truediv"
  input: "loss/dense_1_loss/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_grad/Mul"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_grad/Sum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_grad/Mul_1"
  op: "Mul"
  input: "loss/dense_1_loss/Neg"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_grad/Mul_1"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_grad/Sum_1"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Log_1_grad/Reciprocal"
  op: "Reciprocal"
  input: "loss/dense_1_loss/add_3"
  input: "^training/RMSprop/gradients/loss/dense_1_loss/mul_1_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Log_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Log_1_grad/mul"
  op: "Mul"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_1_grad/Reshape_1"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Log_1_grad/Reciprocal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Log_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Log_grad/Reciprocal"
  op: "Reciprocal"
  input: "loss/dense_1_loss/add_2"
  input: "^training/RMSprop/gradients/loss/dense_1_loss/mul_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Log"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Log_grad/mul"
  op: "Mul"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_grad/Reshape_1"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Log_grad/Reciprocal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Log"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/add_3_grad/Shape"
  op: "Shape"
  input: "loss/dense_1_loss/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/add_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/add_3_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/add_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_3_grad/Shape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/add_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/add_3_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Log_1_grad/mul"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/add_3_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_3_grad/Sum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_3_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/add_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/add_3_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Log_1_grad/mul"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/add_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_3_grad/Sum_1"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/add_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/add_2_grad/Shape"
  op: "Shape"
  input: "loss/dense_1_loss/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/add_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/add_2_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/add_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_2_grad/Shape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/add_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/add_2_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Log_grad/mul"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/add_2_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_2_grad/Sum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/add_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/add_2_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Log_grad/mul"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/add_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_2_grad/Sum_1"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/add_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/sub_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/sub_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/sub_1_grad/Shape_1"
  op: "Shape"
  input: "dense_1/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/sub_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/sub_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/loss/dense_1_loss/sub_1_grad/Shape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/sub_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/sub_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/sub_1_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_3_grad/Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/sub_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/sub_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/sub_1_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/sub_1_grad/Sum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/sub_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/sub_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/sub_1_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_3_grad/Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/sub_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/sub_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/sub_1_grad/Neg"
  op: "Neg"
  input: "training/RMSprop/gradients/loss/dense_1_loss/sub_1_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/sub_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/sub_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/sub_1_grad/Neg"
  input: "training/RMSprop/gradients/loss/dense_1_loss/sub_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/sub_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/add_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/add_1_grad/Shape_1"
  op: "Shape"
  input: "dense_1/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/add_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_1_grad/Shape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/add_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/add_1_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_2_grad/Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/add_1_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_1_grad/Sum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/add_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/add_1_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_2_grad/Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_1_grad/Sum_1"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/add_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/AddN"
  op: "AddN"
  input: "training/RMSprop/gradients/loss/dense_1_loss/sub_1_grad/Reshape_1"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_1_grad/Reshape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/sub_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/dense_1/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "dense_1/Sigmoid"
  input: "training/RMSprop/gradients/AddN"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/Sigmoid"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/dense_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/RMSprop/gradients/dense_1/Sigmoid_grad/SigmoidGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/RMSprop/gradients/dense_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/RMSprop/gradients/dense_1/Sigmoid_grad/SigmoidGrad"
  input: "dense_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/dense_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "net/TensorArrayReadV3"
  input: "training/RMSprop/gradients/dense_1/Sigmoid_grad/SigmoidGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "net/TensorArray"
  input: "net/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/TensorArray"
        s: "loc:@net/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/RMSprop/gradients"
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "net/while/Exit_2"
  input: "^training/RMSprop/gradients/net/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/TensorArray"
        s: "loc:@net/TensorArrayReadV3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "training/RMSprop/gradients/net/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "net/sub_1"
  input: "training/RMSprop/gradients/dense_1/MatMul_grad/MatMul"
  input: "training/RMSprop/gradients/net/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/TensorArrayReadV3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/zeros_like"
  op: "ZerosLike"
  input: "net/while/Exit_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "training/RMSprop/gradients/net/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "training/RMSprop/gradients/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Exit_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "training/RMSprop/gradients/net/while/Exit_2_grad/b_exit"
  input: "training/RMSprop/gradients/net/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "training/RMSprop/gradients/net/while/Exit_3_grad/b_exit"
  input: "training/RMSprop/gradients/net/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/net/while/Switch_2_grad/b_switch"
  input: "training/RMSprop/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/net/while/Switch_3_grad/b_switch"
  input: "training/RMSprop/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "training/RMSprop/gradients/net/while/Merge_2_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Enter_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "training/RMSprop/gradients/net/while/Merge_3_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Enter_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "training/RMSprop/gradients/net/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "training/RMSprop/gradients/net/while/Merge_2_grad/Switch:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_6"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/RMSprop/gradients"
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "net/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/RMSprop/gradients/net/while/Merge_2_grad/Switch:1"
  input: "^training/RMSprop/gradients/net/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_6"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "training/RMSprop/gradients/net/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "training/RMSprop/gradients/net/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "training/RMSprop/gradients/net/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Identity_1"
        s: "loc:@net/while/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Identity_1"
        s: "loc:@net/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  input: "net/while/Identity_1"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^training/RMSprop/gradients/net/while/MatMul_1_grad/MatMul_1/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/MatMul_2_grad/MatMul_1/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/MatMul_5_grad/MatMul_1/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/MatMul_grad/MatMul_1/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/RMSprop/gradients/net/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/RMSprop/gradients/net/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/RMSprop/gradients/net/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/mul_3_grad/Mul/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/mul_4_grad/Mul/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/RMSprop/gradients/net/while/mul_5_grad/Mul_1/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/RMSprop/gradients/net/while/mul_6_grad/Mul/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/mul_6_grad/Mul_1/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/RMSprop/gradients/net/while/mul_7_grad/Mul/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/mul_7_grad/Mul_1/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/sub_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_6"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/AddN_1"
  op: "AddN"
  input: "training/RMSprop/gradients/net/while/Merge_3_grad/Switch:1"
  input: "training/RMSprop/gradients/net/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_6_grad/Shape"
  op: "Shape"
  input: "net/while/mul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_6_grad/Shape_1"
  op: "Shape"
  input: "net/while/mul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_6_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/net/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/net/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_6"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_6_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_6_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/add_6_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_6_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/add_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_6_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/add_6_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/net/while/add_6_grad/Shape"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/add_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/add_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_6_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/add_6_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_6_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_6_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/add_6_grad/BroadcastGradientArgs/Enter_1"
  input: "training/RMSprop/gradients/net/while/add_6_grad/Shape_1"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_6_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/AddN_1"
  input: "training/RMSprop/gradients/net/while/add_6_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_6_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/add_6_grad/Sum"
  input: "training/RMSprop/gradients/net/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_6"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_6_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/AddN_1"
  input: "training/RMSprop/gradients/net/while/add_6_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_6_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/add_6_grad/Sum_1"
  input: "training/RMSprop/gradients/net/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_6"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/Shape"
  op: "Shape"
  input: "net/while/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/Shape_1"
  op: "Shape"
  input: "net/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/Shape"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/Enter_1"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/Shape_1"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/Mul"
  op: "Mul"
  input: "training/RMSprop/gradients/net/while/add_6_grad/Reshape"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Identity_3"
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Identity_3"
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/Mul/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/Mul/Enter"
  input: "net/while/Identity_3"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/Mul/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/Mul"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/Sum"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/Mul_1"
  op: "Mul"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/Mul_1/StackPopV2"
  input: "training/RMSprop/gradients/net/while/add_6_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/Mul_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/Mul_1/Enter"
  input: "net/while/clip_by_value"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/Mul_1/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/Mul_1"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/Sum_1"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/Shape"
  op: "Shape"
  input: "net/while/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/Shape_1"
  op: "Shape"
  input: "net/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/Shape"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/Enter_1"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/Shape_1"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/Mul"
  op: "Mul"
  input: "training/RMSprop/gradients/net/while/add_6_grad/Reshape_1"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_5"
        s: "loc:@net/while/mul_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_5"
        s: "loc:@net/while/mul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/Mul/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/Mul/Enter"
  input: "net/while/add_5"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/Mul/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/Mul"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/Sum"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/Mul_1"
  op: "Mul"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/Mul_1/StackPopV2"
  input: "training/RMSprop/gradients/net/while/add_6_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
        s: "loc:@net/while/sub"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
        s: "loc:@net/while/sub"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/Mul_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/Mul_1/Enter"
  input: "net/while/sub"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/Mul_1/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/Mul_1"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/Sum_1"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/net/while/Merge_2_grad/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/sub_grad/Shape"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/sub"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/sub_grad/Shape_1"
  op: "Shape"
  input: "net/while/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/sub"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/net/while/sub_grad/Shape"
  input: "training/RMSprop/gradients/net/while/sub_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/sub"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/sub_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/sub"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/sub_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/sub_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/sub"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/sub_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/sub_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/sub"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/sub_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/sub_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/net/while/sub_grad/Shape_1"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/sub"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/sub_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/sub_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/sub"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/sub_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/sub_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/sub"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/sub_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/Reshape"
  input: "training/RMSprop/gradients/net/while/sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/sub"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/sub_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/sub_grad/Sum"
  input: "training/RMSprop/gradients/net/while/sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/sub"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/sub_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/Reshape"
  input: "training/RMSprop/gradients/net/while/sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/sub"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/sub_grad/Neg"
  op: "Neg"
  input: "training/RMSprop/gradients/net/while/sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/sub"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/sub_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/sub_grad/Neg"
  input: "training/RMSprop/gradients/net/while/sub_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/sub"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_5_grad/Shape"
  op: "Shape"
  input: "net/while/BiasAdd_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_5_grad/Shape_1"
  op: "Shape"
  input: "net/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_5"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/net/while/add_5_grad/Shape"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/Enter_1"
  input: "training/RMSprop/gradients/net/while/add_5_grad/Shape_1"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_5_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/Reshape_1"
  input: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_5_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/add_5_grad/Sum"
  input: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_5"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_5_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/Reshape_1"
  input: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_5_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/add_5_grad/Sum_1"
  input: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_5"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/AddN_2"
  op: "AddN"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/Reshape"
  input: "training/RMSprop/gradients/net/while/sub_grad/Reshape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_grad/Shape"
  op: "Shape"
  input: "net/while/clip_by_value/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_grad/Shape_1"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_grad/Shape_2"
  op: "Shape"
  input: "training/RMSprop/gradients/AddN_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_grad/zeros/Const"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_grad/zeros"
  op: "Fill"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/Shape_2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/GreaterEqual/Enter"
  input: "net/while/clip_by_value/Minimum"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/Shape"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_grad/Select"
  op: "Select"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/GreaterEqual"
  input: "training/RMSprop/gradients/AddN_2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_grad/Select_1"
  op: "Select"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/GreaterEqual"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/zeros"
  input: "training/RMSprop/gradients/AddN_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/Select"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/Sum"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/Select_1"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/Sum_1"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/BiasAdd_2_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/RMSprop/gradients/net/while/add_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/BiasAdd_2"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_5_grad/MatMul"
  op: "MatMul"
  input: "training/RMSprop/gradients/net/while/add_5_grad/Reshape_1"
  input: "training/RMSprop/gradients/net/while/MatMul_5_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_5"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_5_grad/MatMul/Enter"
  op: "Enter"
  input: "net/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_5_grad/MatMul_1"
  op: "MatMul"
  input: "training/RMSprop/gradients/net/while/MatMul_5_grad/MatMul_1/StackPopV2"
  input: "training/RMSprop/gradients/net/while/add_5_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_5"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_5_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_5"
        s: "loc:@net/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_5_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/MatMul_5_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_5"
        s: "loc:@net/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_5_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/MatMul_5_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_5_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/MatMul_5_grad/MatMul_1/Enter"
  input: "net/while/mul_5"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_5_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/MatMul_5_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_5_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/MatMul_5_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/Shape"
  op: "Shape"
  input: "net/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/zeros"
  op: "Fill"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/Shape_2"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_2"
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_2"
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/LessEqual/Enter"
  input: "net/while/add_2"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/Shape"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/Select"
  op: "Select"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/LessEqual"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/Reshape"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/Select_1"
  op: "Select"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/LessEqual"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/zeros"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/Select"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/Sum"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/Select_1"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/Sum_1"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_2_grad/MatMul"
  op: "MatMul"
  input: "training/RMSprop/gradients/net/while/add_5_grad/Reshape"
  input: "training/RMSprop/gradients/net/while/MatMul_2_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_2_grad/MatMul/Enter"
  op: "Enter"
  input: "net/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_2_grad/MatMul_1"
  op: "MatMul"
  input: "training/RMSprop/gradients/net/while/MatMul_2_grad/MatMul_1/StackPopV2"
  input: "training/RMSprop/gradients/net/while/add_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_2_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_2"
        s: "loc:@net/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_2_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/MatMul_2_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_2"
        s: "loc:@net/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_2_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/MatMul_2_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_2_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/MatMul_2_grad/MatMul_1/Enter"
  input: "net/while/mul_2"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_2_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/MatMul_2_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_2_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/MatMul_2_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/BiasAdd_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/BiasAdd_2/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/BiasAdd_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/BiasAdd_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/BiasAdd_2/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/BiasAdd_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/RMSprop/gradients/net/while/BiasAdd_2/Enter_grad/b_acc_1"
  input: "training/RMSprop/gradients/net/while/BiasAdd_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/BiasAdd_2/Enter_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/net/while/BiasAdd_2/Enter_grad/b_acc_2"
  input: "training/RMSprop/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/BiasAdd_2/Enter_grad/Add"
  op: "Add"
  input: "training/RMSprop/gradients/net/while/BiasAdd_2/Enter_grad/Switch:1"
  input: "training/RMSprop/gradients/net/while/BiasAdd_2_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/BiasAdd_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/net/while/BiasAdd_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/BiasAdd_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/RMSprop/gradients/net/while/BiasAdd_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/Shape"
  op: "Shape"
  input: "net/while/clip_by_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/Shape_1"
  op: "Shape"
  input: "net/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_5"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/Shape"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/Enter_1"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/Shape_1"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/Mul"
  op: "Mul"
  input: "training/RMSprop/gradients/net/while/MatMul_5_grad/MatMul"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_5"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/Mul"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/Sum"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_5"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/Mul_1"
  op: "Mul"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/Mul_1/StackPopV2"
  input: "training/RMSprop/gradients/net/while/MatMul_5_grad/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_5"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
        s: "loc:@net/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
        s: "loc:@net/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/Mul_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/Mul_1/Enter"
  input: "net/while/clip_by_value_1"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/Mul_1/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/Mul_1"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/Sum_1"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_5"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_5/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_5/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_5/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/MatMul_5/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_5/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_5/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/RMSprop/gradients/net/while/MatMul_5/Enter_grad/b_acc_1"
  input: "training/RMSprop/gradients/net/while/MatMul_5/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_5/Enter_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/net/while/MatMul_5/Enter_grad/b_acc_2"
  input: "training/RMSprop/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_5/Enter_grad/Add"
  op: "Add"
  input: "training/RMSprop/gradients/net/while/MatMul_5/Enter_grad/Switch:1"
  input: "training/RMSprop/gradients/net/while/MatMul_5_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_5/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/net/while/MatMul_5/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_5/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/RMSprop/gradients/net/while/MatMul_5/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_2_grad/Shape"
  op: "Shape"
  input: "net/while/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_2_grad/Shape_1"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/net/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/net/while/add_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/add_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/add_2_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/net/while/add_2_grad/Shape"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_2_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/Reshape"
  input: "training/RMSprop/gradients/net/while/add_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_2_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/add_2_grad/Sum"
  input: "training/RMSprop/gradients/net/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_2_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/Reshape"
  input: "training/RMSprop/gradients/net/while/add_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/add_2_grad/Sum_1"
  input: "training/RMSprop/gradients/net/while/add_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 13
          }
          dim {
            size: 20
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/MatMul_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/RMSprop/gradients/net/while/MatMul_2/Enter_grad/b_acc_1"
  input: "training/RMSprop/gradients/net/while/MatMul_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_2/Enter_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/net/while/MatMul_2/Enter_grad/b_acc_2"
  input: "training/RMSprop/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_2/Enter_grad/Add"
  op: "Add"
  input: "training/RMSprop/gradients/net/while/MatMul_2/Enter_grad/Switch:1"
  input: "training/RMSprop/gradients/net/while/MatMul_2_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/net/while/MatMul_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/RMSprop/gradients/net/while/MatMul_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/strided_slice_8_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/strided_slice_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 60
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/strided_slice_8_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/RMSprop/gradients/net/strided_slice_8_grad/Shape"
  input: "net/strided_slice_8/stack"
  input: "net/strided_slice_8/stack_1"
  input: "net/strided_slice_8/stack_2"
  input: "training/RMSprop/gradients/net/while/BiasAdd_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/strided_slice_8"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/Shape"
  op: "Shape"
  input: "net/while/clip_by_value_1/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/Shape_1"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/Shape_2"
  op: "Shape"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/zeros/Const"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/zeros"
  op: "Fill"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/Shape_2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/GreaterEqual/Enter"
  input: "net/while/clip_by_value_1/Minimum"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/Shape"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/Select"
  op: "Select"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/GreaterEqual"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/Reshape"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/Select_1"
  op: "Select"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/GreaterEqual"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/zeros"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/Select"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/Sum"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/Select_1"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/Sum_1"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/strided_slice_5_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/strided_slice_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\024\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/strided_slice_5_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/RMSprop/gradients/net/strided_slice_5_grad/Shape"
  input: "net/strided_slice_5/stack"
  input: "net/strided_slice_5/stack_1"
  input: "net/strided_slice_5/stack_2"
  input: "training/RMSprop/gradients/net/while/MatMul_5/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/strided_slice_5"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_3_grad/Shape"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_3_grad/Shape_1"
  op: "Shape"
  input: "net/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/net/while/mul_3_grad/Shape"
  input: "training/RMSprop/gradients/net/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/mul_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/mul_3_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/net/while/mul_3_grad/Shape_1"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_3_grad/Mul"
  op: "Mul"
  input: "training/RMSprop/gradients/net/while/add_2_grad/Reshape"
  input: "training/RMSprop/gradients/net/while/mul_3_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_3_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_1"
        s: "loc:@net/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_3_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/mul_3_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_1"
        s: "loc:@net/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_3_grad/Mul/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_3_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_3_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/mul_3_grad/Mul/Enter"
  input: "net/while/add_1"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_3_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/mul_3_grad/Mul/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_3_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_3_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_3_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/mul_3_grad/Mul"
  input: "training/RMSprop/gradients/net/while/mul_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_3_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/mul_3_grad/Sum"
  input: "training/RMSprop/gradients/net/while/mul_3_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_3_grad/Mul_1"
  op: "Mul"
  input: "training/RMSprop/gradients/net/while/mul_3_grad/Mul_1/Const"
  input: "training/RMSprop/gradients/net/while/add_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_3_grad/Mul_1/Const"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.2
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_3_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/mul_3_grad/Mul_1"
  input: "training/RMSprop/gradients/net/while/mul_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/mul_3_grad/Sum_1"
  input: "training/RMSprop/gradients/net/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/strided_slice_4_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/strided_slice_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\r\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/strided_slice_4_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/RMSprop/gradients/net/strided_slice_4_grad/Shape"
  input: "net/strided_slice_4/stack"
  input: "net/strided_slice_4/stack_1"
  input: "net/strided_slice_4/stack_2"
  input: "training/RMSprop/gradients/net/while/MatMul_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/strided_slice_4"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/Shape"
  op: "Shape"
  input: "net/while/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/zeros"
  op: "Fill"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/Shape_2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_4"
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_4"
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  input: "net/while/add_4"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/Shape"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/Select"
  op: "Select"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/LessEqual"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/Reshape"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/Select_1"
  op: "Select"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/LessEqual"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/zeros"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/Select"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/Sum"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/Select_1"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/Sum_1"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_1_grad/Shape"
  op: "Shape"
  input: "net/while/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_1_grad/Shape_1"
  op: "Shape"
  input: "net/while/MatMul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/net/while/add_1_grad/Shape"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs/Enter_1"
  input: "training/RMSprop/gradients/net/while/add_1_grad/Shape_1"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_1_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/mul_3_grad/Reshape_1"
  input: "training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_1_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/add_1_grad/Sum"
  input: "training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_1_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/mul_3_grad/Reshape_1"
  input: "training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/add_1_grad/Sum_1"
  input: "training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_4_grad/Shape"
  op: "Shape"
  input: "net/while/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_4_grad/Shape_1"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/net/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/net/while/add_4_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/add_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/add_4_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/net/while/add_4_grad/Shape"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_4_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/Reshape"
  input: "training/RMSprop/gradients/net/while/add_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_4_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/add_4_grad/Sum"
  input: "training/RMSprop/gradients/net/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_4_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/Reshape"
  input: "training/RMSprop/gradients/net/while/add_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/add_4_grad/Sum_1"
  input: "training/RMSprop/gradients/net/while/add_4_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/RMSprop/gradients/net/while/add_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_3_grad/MatMul"
  op: "MatMul"
  input: "training/RMSprop/gradients/net/while/add_1_grad/Reshape_1"
  input: "training/RMSprop/gradients/net/while/MatMul_3_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_3_grad/MatMul/Enter"
  op: "Enter"
  input: "net/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_3_grad/MatMul_1"
  op: "MatMul"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/Mul/StackPopV2"
  input: "training/RMSprop/gradients/net/while/add_1_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_4_grad/Shape"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_4_grad/Shape_1"
  op: "Shape"
  input: "net/while/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/net/while/mul_4_grad/Shape"
  input: "training/RMSprop/gradients/net/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/mul_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/mul_4_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/net/while/mul_4_grad/Shape_1"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_4_grad/Mul"
  op: "Mul"
  input: "training/RMSprop/gradients/net/while/add_4_grad/Reshape"
  input: "training/RMSprop/gradients/net/while/mul_4_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_4_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_3"
        s: "loc:@net/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_4_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/mul_4_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_3"
        s: "loc:@net/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_4_grad/Mul/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_4_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_4_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/mul_4_grad/Mul/Enter"
  input: "net/while/add_3"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_4_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/mul_4_grad/Mul/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_4_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_4_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_4_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/mul_4_grad/Mul"
  input: "training/RMSprop/gradients/net/while/mul_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_4_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/mul_4_grad/Sum"
  input: "training/RMSprop/gradients/net/while/mul_4_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_4_grad/Mul_1"
  op: "Mul"
  input: "training/RMSprop/gradients/net/while/mul_4_grad/Mul_1/Const"
  input: "training/RMSprop/gradients/net/while/add_4_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_4_grad/Mul_1/Const"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.2
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_4_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/mul_4_grad/Mul_1"
  input: "training/RMSprop/gradients/net/while/mul_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/mul_4_grad/Sum_1"
  input: "training/RMSprop/gradients/net/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/RMSprop/gradients/net/while/add_1_grad/Reshape"
  input: "training/RMSprop/gradients/net/while/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "net/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "training/RMSprop/gradients/net/while/MatMul_grad/MatMul_1/StackPopV2"
  input: "training/RMSprop/gradients/net/while/add_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul"
        s: "loc:@net/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/MatMul_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul"
        s: "loc:@net/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/MatMul_grad/MatMul_1/Enter"
  input: "net/while/mul"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/BiasAdd/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/BiasAdd/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/RMSprop/gradients/net/while/BiasAdd/Enter_grad/b_acc_1"
  input: "training/RMSprop/gradients/net/while/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/net/while/BiasAdd/Enter_grad/b_acc_2"
  input: "training/RMSprop/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "training/RMSprop/gradients/net/while/BiasAdd/Enter_grad/Switch:1"
  input: "training/RMSprop/gradients/net/while/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/net/while/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/RMSprop/gradients/net/while/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/MatMul_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/RMSprop/gradients/net/while/MatMul_3/Enter_grad/b_acc_1"
  input: "training/RMSprop/gradients/net/while/MatMul_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_3/Enter_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/net/while/MatMul_3/Enter_grad/b_acc_2"
  input: "training/RMSprop/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_3/Enter_grad/Add"
  op: "Add"
  input: "training/RMSprop/gradients/net/while/MatMul_3/Enter_grad/Switch:1"
  input: "training/RMSprop/gradients/net/while/MatMul_3_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/net/while/MatMul_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/RMSprop/gradients/net/while/MatMul_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_3_grad/Shape"
  op: "Shape"
  input: "net/while/BiasAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_3_grad/Shape_1"
  op: "Shape"
  input: "net/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/net/while/add_3_grad/Shape"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs/Enter_1"
  input: "training/RMSprop/gradients/net/while/add_3_grad/Shape_1"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_3_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/mul_4_grad/Reshape_1"
  input: "training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_3_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/add_3_grad/Sum"
  input: "training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_3_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/mul_4_grad/Reshape_1"
  input: "training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/add_3_grad/Sum_1"
  input: "training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 13
          }
          dim {
            size: 20
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/RMSprop/gradients/net/while/MatMul/Enter_grad/b_acc_1"
  input: "training/RMSprop/gradients/net/while/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/net/while/MatMul/Enter_grad/b_acc_2"
  input: "training/RMSprop/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul/Enter_grad/Add"
  op: "Add"
  input: "training/RMSprop/gradients/net/while/MatMul/Enter_grad/Switch:1"
  input: "training/RMSprop/gradients/net/while/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/net/while/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/RMSprop/gradients/net/while/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/strided_slice_6_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/strided_slice_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 60
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/strided_slice_6_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/RMSprop/gradients/net/strided_slice_6_grad/Shape"
  input: "net/strided_slice_6/stack"
  input: "net/strided_slice_6/stack_1"
  input: "net/strided_slice_6/stack_2"
  input: "training/RMSprop/gradients/net/while/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/strided_slice_6"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/strided_slice_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/strided_slice_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\024\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/strided_slice_1_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/RMSprop/gradients/net/strided_slice_1_grad/Shape"
  input: "net/strided_slice_1/stack"
  input: "net/strided_slice_1/stack_1"
  input: "net/strided_slice_1/stack_2"
  input: "training/RMSprop/gradients/net/while/MatMul_3/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/strided_slice_1"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/BiasAdd_1_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/RMSprop/gradients/net/while/add_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/BiasAdd_1"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_4_grad/MatMul"
  op: "MatMul"
  input: "training/RMSprop/gradients/net/while/add_3_grad/Reshape_1"
  input: "training/RMSprop/gradients/net/while/MatMul_4_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_4"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_4_grad/MatMul/Enter"
  op: "Enter"
  input: "net/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_4_grad/MatMul_1"
  op: "MatMul"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/Mul/StackPopV2"
  input: "training/RMSprop/gradients/net/while/add_3_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_4"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/strided_slice_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/strided_slice"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\r\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/strided_slice_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/RMSprop/gradients/net/strided_slice_grad/Shape"
  input: "net/strided_slice/stack"
  input: "net/strided_slice/stack_1"
  input: "net/strided_slice/stack_2"
  input: "training/RMSprop/gradients/net/while/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/strided_slice"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_1_grad/MatMul"
  op: "MatMul"
  input: "training/RMSprop/gradients/net/while/add_3_grad/Reshape"
  input: "training/RMSprop/gradients/net/while/MatMul_1_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_1_grad/MatMul/Enter"
  op: "Enter"
  input: "net/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_1_grad/MatMul_1"
  op: "MatMul"
  input: "training/RMSprop/gradients/net/while/MatMul_1_grad/MatMul_1/StackPopV2"
  input: "training/RMSprop/gradients/net/while/add_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_1_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_1"
        s: "loc:@net/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_1_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/MatMul_1_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_1"
        s: "loc:@net/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_1_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/MatMul_1_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_1_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/MatMul_1_grad/MatMul_1/Enter"
  input: "net/while/mul_1"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_1_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/MatMul_1_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_1_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/MatMul_1_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/BiasAdd_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/BiasAdd_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/BiasAdd_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/BiasAdd_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/BiasAdd_1/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/BiasAdd_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/RMSprop/gradients/net/while/BiasAdd_1/Enter_grad/b_acc_1"
  input: "training/RMSprop/gradients/net/while/BiasAdd_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/BiasAdd_1/Enter_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/net/while/BiasAdd_1/Enter_grad/b_acc_2"
  input: "training/RMSprop/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/BiasAdd_1/Enter_grad/Add"
  op: "Add"
  input: "training/RMSprop/gradients/net/while/BiasAdd_1/Enter_grad/Switch:1"
  input: "training/RMSprop/gradients/net/while/BiasAdd_1_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/BiasAdd_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/net/while/BiasAdd_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/BiasAdd_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/RMSprop/gradients/net/while/BiasAdd_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/AddN_3"
  op: "AddN"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/Reshape_1"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/Reshape_1"
  input: "training/RMSprop/gradients/net/while/MatMul_3_grad/MatMul"
  input: "training/RMSprop/gradients/net/while/MatMul_4_grad/MatMul"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_4/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_4/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_4/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/MatMul_4/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_4/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_4/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/RMSprop/gradients/net/while/MatMul_4/Enter_grad/b_acc_1"
  input: "training/RMSprop/gradients/net/while/MatMul_4/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_4/Enter_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/net/while/MatMul_4/Enter_grad/b_acc_2"
  input: "training/RMSprop/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_4/Enter_grad/Add"
  op: "Add"
  input: "training/RMSprop/gradients/net/while/MatMul_4/Enter_grad/Switch:1"
  input: "training/RMSprop/gradients/net/while/MatMul_4_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_4/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/net/while/MatMul_4/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_4/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/RMSprop/gradients/net/while/MatMul_4/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 13
          }
          dim {
            size: 20
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/MatMul_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/RMSprop/gradients/net/while/MatMul_1/Enter_grad/b_acc_1"
  input: "training/RMSprop/gradients/net/while/MatMul_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_1/Enter_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/net/while/MatMul_1/Enter_grad/b_acc_2"
  input: "training/RMSprop/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_1/Enter_grad/Add"
  op: "Add"
  input: "training/RMSprop/gradients/net/while/MatMul_1/Enter_grad/Switch:1"
  input: "training/RMSprop/gradients/net/while/MatMul_1_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/net/while/MatMul_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/RMSprop/gradients/net/while/MatMul_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/strided_slice_7_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/strided_slice_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 60
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/strided_slice_7_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/RMSprop/gradients/net/strided_slice_7_grad/Shape"
  input: "net/strided_slice_7/stack"
  input: "net/strided_slice_7/stack_1"
  input: "net/strided_slice_7/stack_2"
  input: "training/RMSprop/gradients/net/while/BiasAdd_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/strided_slice_7"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/AddN_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/strided_slice_3_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/strided_slice_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\024\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/strided_slice_3_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/RMSprop/gradients/net/strided_slice_3_grad/Shape"
  input: "net/strided_slice_3/stack"
  input: "net/strided_slice_3/stack_1"
  input: "net/strided_slice_3/stack_2"
  input: "training/RMSprop/gradients/net/while/MatMul_4/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/strided_slice_3"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/strided_slice_2_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/strided_slice_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\r\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/strided_slice_2_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/RMSprop/gradients/net/strided_slice_2_grad/Shape"
  input: "net/strided_slice_2/stack"
  input: "net/strided_slice_2/stack_1"
  input: "net/strided_slice_2/stack_2"
  input: "training/RMSprop/gradients/net/while/MatMul_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/strided_slice_2"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/RMSprop/gradients/AddN_4"
  op: "AddN"
  input: "training/RMSprop/gradients/net/strided_slice_8_grad/StridedSliceGrad"
  input: "training/RMSprop/gradients/net/strided_slice_6_grad/StridedSliceGrad"
  input: "training/RMSprop/gradients/net/strided_slice_7_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/strided_slice_8"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/AddN_5"
  op: "AddN"
  input: "training/RMSprop/gradients/net/strided_slice_5_grad/StridedSliceGrad"
  input: "training/RMSprop/gradients/net/strided_slice_1_grad/StridedSliceGrad"
  input: "training/RMSprop/gradients/net/strided_slice_3_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/strided_slice_5"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/AddN_6"
  op: "AddN"
  input: "training/RMSprop/gradients/net/strided_slice_4_grad/StridedSliceGrad"
  input: "training/RMSprop/gradients/net/strided_slice_grad/StridedSliceGrad"
  input: "training/RMSprop/gradients/net/strided_slice_2_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/strided_slice_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/zeros"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 13
          }
          dim {
            size: 60
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/Variable"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 13
        }
        dim {
          size: 60
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/Variable/Assign"
  op: "Assign"
  input: "training/RMSprop/Variable"
  input: "training/RMSprop/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/Variable/read"
  op: "Identity"
  input: "training/RMSprop/Variable"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable"
      }
    }
  }
}
node {
  name: "training/RMSprop/zeros_1/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\024\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "training/RMSprop/zeros_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/zeros_1"
  op: "Fill"
  input: "training/RMSprop/zeros_1/shape_as_tensor"
  input: "training/RMSprop/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/Variable_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
        dim {
          size: 60
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/Variable_1/Assign"
  op: "Assign"
  input: "training/RMSprop/Variable_1"
  input: "training/RMSprop/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/Variable_1/read"
  op: "Identity"
  input: "training/RMSprop/Variable_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/zeros_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 60
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/Variable_2"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 60
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/Variable_2/Assign"
  op: "Assign"
  input: "training/RMSprop/Variable_2"
  input: "training/RMSprop/zeros_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/Variable_2/read"
  op: "Identity"
  input: "training/RMSprop/Variable_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/zeros_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/Variable_3"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/Variable_3/Assign"
  op: "Assign"
  input: "training/RMSprop/Variable_3"
  input: "training/RMSprop/zeros_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_3"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/Variable_3/read"
  op: "Identity"
  input: "training/RMSprop/Variable_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/zeros_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/Variable_4"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/Variable_4/Assign"
  op: "Assign"
  input: "training/RMSprop/Variable_4"
  input: "training/RMSprop/zeros_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_4"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/Variable_4/read"
  op: "Identity"
  input: "training/RMSprop/Variable_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/AssignAdd/value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "training/RMSprop/AssignAdd"
  op: "AssignAdd"
  input: "RMSprop/iterations"
  input: "training/RMSprop/AssignAdd/value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/iterations"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/mul"
  op: "Mul"
  input: "RMSprop/rho/read"
  input: "training/RMSprop/Variable/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/RMSprop/sub"
  op: "Sub"
  input: "training/RMSprop/sub/x"
  input: "RMSprop/rho/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Square"
  op: "Square"
  input: "training/RMSprop/gradients/AddN_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/mul_1"
  op: "Mul"
  input: "training/RMSprop/sub"
  input: "training/RMSprop/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/add"
  op: "Add"
  input: "training/RMSprop/mul"
  input: "training/RMSprop/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Assign"
  op: "Assign"
  input: "training/RMSprop/Variable"
  input: "training/RMSprop/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/mul_2"
  op: "Mul"
  input: "RMSprop/lr/read"
  input: "training/RMSprop/gradients/AddN_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/RMSprop/clip_by_value/Minimum"
  op: "Minimum"
  input: "training/RMSprop/add"
  input: "training/RMSprop/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/clip_by_value"
  op: "Maximum"
  input: "training/RMSprop/clip_by_value/Minimum"
  input: "training/RMSprop/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Sqrt"
  op: "Sqrt"
  input: "training/RMSprop/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/add_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1e-07
      }
    }
  }
}
node {
  name: "training/RMSprop/add_1"
  op: "Add"
  input: "training/RMSprop/Sqrt"
  input: "training/RMSprop/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/truediv"
  op: "RealDiv"
  input: "training/RMSprop/mul_2"
  input: "training/RMSprop/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/sub_1"
  op: "Sub"
  input: "net/kernel/read"
  input: "training/RMSprop/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Assign_1"
  op: "Assign"
  input: "net/kernel"
  input: "training/RMSprop/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/mul_3"
  op: "Mul"
  input: "RMSprop/rho/read"
  input: "training/RMSprop/Variable_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/sub_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/RMSprop/sub_2"
  op: "Sub"
  input: "training/RMSprop/sub_2/x"
  input: "RMSprop/rho/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Square_1"
  op: "Square"
  input: "training/RMSprop/gradients/AddN_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/mul_4"
  op: "Mul"
  input: "training/RMSprop/sub_2"
  input: "training/RMSprop/Square_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/add_2"
  op: "Add"
  input: "training/RMSprop/mul_3"
  input: "training/RMSprop/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Assign_2"
  op: "Assign"
  input: "training/RMSprop/Variable_1"
  input: "training/RMSprop/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/mul_5"
  op: "Mul"
  input: "RMSprop/lr/read"
  input: "training/RMSprop/gradients/AddN_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/RMSprop/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "training/RMSprop/add_2"
  input: "training/RMSprop/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/clip_by_value_1"
  op: "Maximum"
  input: "training/RMSprop/clip_by_value_1/Minimum"
  input: "training/RMSprop/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Sqrt_1"
  op: "Sqrt"
  input: "training/RMSprop/clip_by_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/add_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1e-07
      }
    }
  }
}
node {
  name: "training/RMSprop/add_3"
  op: "Add"
  input: "training/RMSprop/Sqrt_1"
  input: "training/RMSprop/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/truediv_1"
  op: "RealDiv"
  input: "training/RMSprop/mul_5"
  input: "training/RMSprop/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/sub_3"
  op: "Sub"
  input: "net/recurrent_kernel/read"
  input: "training/RMSprop/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Assign_3"
  op: "Assign"
  input: "net/recurrent_kernel"
  input: "training/RMSprop/sub_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/mul_6"
  op: "Mul"
  input: "RMSprop/rho/read"
  input: "training/RMSprop/Variable_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/sub_4/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/RMSprop/sub_4"
  op: "Sub"
  input: "training/RMSprop/sub_4/x"
  input: "RMSprop/rho/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Square_2"
  op: "Square"
  input: "training/RMSprop/gradients/AddN_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/mul_7"
  op: "Mul"
  input: "training/RMSprop/sub_4"
  input: "training/RMSprop/Square_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/add_4"
  op: "Add"
  input: "training/RMSprop/mul_6"
  input: "training/RMSprop/mul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Assign_4"
  op: "Assign"
  input: "training/RMSprop/Variable_2"
  input: "training/RMSprop/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/mul_8"
  op: "Mul"
  input: "RMSprop/lr/read"
  input: "training/RMSprop/gradients/AddN_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/RMSprop/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "training/RMSprop/add_4"
  input: "training/RMSprop/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/clip_by_value_2"
  op: "Maximum"
  input: "training/RMSprop/clip_by_value_2/Minimum"
  input: "training/RMSprop/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Sqrt_2"
  op: "Sqrt"
  input: "training/RMSprop/clip_by_value_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/add_5/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1e-07
      }
    }
  }
}
node {
  name: "training/RMSprop/add_5"
  op: "Add"
  input: "training/RMSprop/Sqrt_2"
  input: "training/RMSprop/add_5/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/truediv_2"
  op: "RealDiv"
  input: "training/RMSprop/mul_8"
  input: "training/RMSprop/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/sub_5"
  op: "Sub"
  input: "net/bias/read"
  input: "training/RMSprop/truediv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Assign_5"
  op: "Assign"
  input: "net/bias"
  input: "training/RMSprop/sub_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/mul_9"
  op: "Mul"
  input: "RMSprop/rho/read"
  input: "training/RMSprop/Variable_3/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/sub_6/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/RMSprop/sub_6"
  op: "Sub"
  input: "training/RMSprop/sub_6/x"
  input: "RMSprop/rho/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Square_3"
  op: "Square"
  input: "training/RMSprop/gradients/dense_1/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/mul_10"
  op: "Mul"
  input: "training/RMSprop/sub_6"
  input: "training/RMSprop/Square_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/add_6"
  op: "Add"
  input: "training/RMSprop/mul_9"
  input: "training/RMSprop/mul_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Assign_6"
  op: "Assign"
  input: "training/RMSprop/Variable_3"
  input: "training/RMSprop/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_3"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/mul_11"
  op: "Mul"
  input: "RMSprop/lr/read"
  input: "training/RMSprop/gradients/dense_1/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Const_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/Const_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/RMSprop/clip_by_value_3/Minimum"
  op: "Minimum"
  input: "training/RMSprop/add_6"
  input: "training/RMSprop/Const_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/clip_by_value_3"
  op: "Maximum"
  input: "training/RMSprop/clip_by_value_3/Minimum"
  input: "training/RMSprop/Const_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Sqrt_3"
  op: "Sqrt"
  input: "training/RMSprop/clip_by_value_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/add_7/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1e-07
      }
    }
  }
}
node {
  name: "training/RMSprop/add_7"
  op: "Add"
  input: "training/RMSprop/Sqrt_3"
  input: "training/RMSprop/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/truediv_3"
  op: "RealDiv"
  input: "training/RMSprop/mul_11"
  input: "training/RMSprop/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/sub_7"
  op: "Sub"
  input: "dense_1/kernel/read"
  input: "training/RMSprop/truediv_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Assign_7"
  op: "Assign"
  input: "dense_1/kernel"
  input: "training/RMSprop/sub_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/mul_12"
  op: "Mul"
  input: "RMSprop/rho/read"
  input: "training/RMSprop/Variable_4/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/sub_8/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/RMSprop/sub_8"
  op: "Sub"
  input: "training/RMSprop/sub_8/x"
  input: "RMSprop/rho/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Square_4"
  op: "Square"
  input: "training/RMSprop/gradients/dense_1/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/mul_13"
  op: "Mul"
  input: "training/RMSprop/sub_8"
  input: "training/RMSprop/Square_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/add_8"
  op: "Add"
  input: "training/RMSprop/mul_12"
  input: "training/RMSprop/mul_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Assign_8"
  op: "Assign"
  input: "training/RMSprop/Variable_4"
  input: "training/RMSprop/add_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_4"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/mul_14"
  op: "Mul"
  input: "RMSprop/lr/read"
  input: "training/RMSprop/gradients/dense_1/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Const_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/Const_9"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/RMSprop/clip_by_value_4/Minimum"
  op: "Minimum"
  input: "training/RMSprop/add_8"
  input: "training/RMSprop/Const_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/clip_by_value_4"
  op: "Maximum"
  input: "training/RMSprop/clip_by_value_4/Minimum"
  input: "training/RMSprop/Const_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Sqrt_4"
  op: "Sqrt"
  input: "training/RMSprop/clip_by_value_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/add_9/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1e-07
      }
    }
  }
}
node {
  name: "training/RMSprop/add_9"
  op: "Add"
  input: "training/RMSprop/Sqrt_4"
  input: "training/RMSprop/add_9/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/truediv_4"
  op: "RealDiv"
  input: "training/RMSprop/mul_14"
  input: "training/RMSprop/add_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/sub_9"
  op: "Sub"
  input: "dense_1/bias/read"
  input: "training/RMSprop/truediv_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Assign_9"
  op: "Assign"
  input: "dense_1/bias"
  input: "training/RMSprop/sub_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/group_deps"
  op: "NoOp"
  input: "^loss/mul"
  input: "^metrics/acc/Mean_1"
  input: "^training/RMSprop/Assign"
  input: "^training/RMSprop/AssignAdd"
  input: "^training/RMSprop/Assign_1"
  input: "^training/RMSprop/Assign_2"
  input: "^training/RMSprop/Assign_3"
  input: "^training/RMSprop/Assign_4"
  input: "^training/RMSprop/Assign_5"
  input: "^training/RMSprop/Assign_6"
  input: "^training/RMSprop/Assign_7"
  input: "^training/RMSprop/Assign_8"
  input: "^training/RMSprop/Assign_9"
}
node {
  name: "IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "RMSprop/lr"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/lr"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "RMSprop/rho"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/rho"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "RMSprop/decay"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/decay"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "RMSprop/iterations"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/iterations"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "training/RMSprop/Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "training/RMSprop/Variable_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "training/RMSprop/Variable_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "training/RMSprop/Variable_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_13"
  op: "IsVariableInitialized"
  input: "training/RMSprop/Variable_4"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "init_1"
  op: "NoOp"
  input: "^RMSprop/decay/Assign"
  input: "^RMSprop/iterations/Assign"
  input: "^RMSprop/lr/Assign"
  input: "^RMSprop/rho/Assign"
  input: "^training/RMSprop/Variable/Assign"
  input: "^training/RMSprop/Variable_1/Assign"
  input: "^training/RMSprop/Variable_2/Assign"
  input: "^training/RMSprop/Variable_3/Assign"
  input: "^training/RMSprop/Variable_4/Assign"
}
node {
  name: "Placeholder_5"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 13
        }
        dim {
          size: 60
        }
      }
    }
  }
}
node {
  name: "Assign_5"
  op: "Assign"
  input: "training/RMSprop/Variable"
  input: "Placeholder_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_6"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
        dim {
          size: 60
        }
      }
    }
  }
}
node {
  name: "Assign_6"
  op: "Assign"
  input: "training/RMSprop/Variable_1"
  input: "Placeholder_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_7"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 60
        }
      }
    }
  }
}
node {
  name: "Assign_7"
  op: "Assign"
  input: "training/RMSprop/Variable_2"
  input: "Placeholder_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_8"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_8"
  op: "Assign"
  input: "training/RMSprop/Variable_3"
  input: "Placeholder_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_3"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_9"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_9"
  op: "Assign"
  input: "training/RMSprop/Variable_4"
  input: "Placeholder_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_4"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "net_output"
  op: "Identity"
  input: "dense_1/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
versions {
  producer: 27
}
