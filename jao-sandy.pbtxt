node {
  name: "net_input"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 29
        }
        dim {
          size: 13
        }
      }
    }
  }
}
node {
  name: "net/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\r\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "net/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.2866911
      }
    }
  }
}
node {
  name: "net/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.2866911
      }
    }
  }
}
node {
  name: "net/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "net/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 2466756
    }
  }
}
node {
  name: "net/random_uniform/sub"
  op: "Sub"
  input: "net/random_uniform/max"
  input: "net/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/random_uniform/mul"
  op: "Mul"
  input: "net/random_uniform/RandomUniform"
  input: "net/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/random_uniform"
  op: "Add"
  input: "net/random_uniform/mul"
  input: "net/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 13
        }
        dim {
          size: 60
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "net/kernel/Assign"
  op: "Assign"
  input: "net/kernel"
  input: "net/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "net/kernel/read"
  op: "Identity"
  input: "net/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/kernel"
      }
    }
  }
}
node {
  name: "net/recurrent_kernel/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
          dim {
            size: 60
          }
        }
        tensor_content: "\320\030\372\275\220\244\257=`#=\276mv\340\275iH\325\273x\200\251\274k\036_\273Fq\003>c\017\265\275:\017{>\360\224,;\020nx>&\331\211\274\377\020-\276\024U|<\371T\026=1\345]=\266\227\235=\253\252\034>\210\332\374=X\004b=\212\231\006\276\007\231C\275\371x\201=\023\362\217\274\202\001\004\276\205`6\276\340\374.=2\211\360\2746\260\224\276x\370\234\274\350C\234\275\033\301\357=Km\224<\0178\303=\333kM\276[\221\375=~\0056\276\245\264\236\274\211g\234=\242\347\254\276\240\366\236=\323!\'=\235\205!\275\341\202>\275\344\331\002>BRr\275\267\013\375=\240\203\006\275\211\316q\276}\265A=W\021t=\272:\020\275\342g^>q\035\347\274\232\347\224>`3\220\274e\0214\273:\007\016>\331]a>5\275\214\276\007\224\217=\311\204I\275\227\367\236=\021\200\t>_\003\261;\306\202\204\275\260\246\322\275\250;7=\377\260\323=\034\230m\275\307\'B>\034\234\255<\313 c\276\255\300\034\276\351\002C\275\372\220\">\314\344\030>\230\257\204;e\373\252=S\376\254=\255\250\205>\nBO\275\333\025\020\276\275X,\275\202\010\007<\240\345`=R\375#>X\215\035\276p\177\352=\3301\202\276\301S\204\274\024~\201=\002\331\250\275UD\225\276\310\225f\275\376\357\374=\237k\330=\026k\216\275\337\212\257\275\376\245E>a\"2\276\031\274\257=$N\025\275\314\323\034>\016\210\223\274\333\305\315\275~\336\272\274r\266f>\343V\244;\250\261\037\275!\370\321\275v\302\241\274\007\220g<1i&\276@\010M>\375\3347>L\026\005\276g?8\276\255K\253\275\317*\035\276\222$\310=\021\2007\276\250\004\004>\365\364\314\274\361\201$\276o\204\230\275`\344\261>\324\370\326=r\0265\274P\241\214\272TK\036\276\307\216m>0\r\"=\344!Z\275\334\n\037=\222\225?\276\374\236\242=z\021\333;\362\026\202=\370U\343\275\332]/=\240\022\211\274\233y\210=\te\236=\243\032%>\212z\367\275\033\205\372\274\255\202U>\2102G=E\316\325\273\203\341D\276\026Q\201\275\303&\230=\205Aj\276\246\377\026\276\010(\311\275 v.=kc\251=%\224\277\2755\177.=s\316\263<\360\2623>\352E\237\275V\270\305\274\313\226\313\274=?\315\272\016\251F>\213b\025<\342\373\204\276\256\252i\276\017)?\275\332\177\221>\255cI\276O\255\341=\035\276\225\275z\323~=\320u\204\275\360;\017>\310X\010\275\0045\257\275\020?}\275K\245\226\275\277\377\244=]\273i\273\370\241\355<\024\327h=\2702\360=&\034\311\273\241\341$\276B\342\277\275j\224\031=\002\030\213\275\"\323G<\246vh\276\323M\343=F\355\227=\016E\017>j\311\231\275\205In\276/\353\200\276\221} \275\314\231\326\275-\343\225\276\2114s<\336\234\303=\241\362\006>\271U\035=\323\343\003\276F8\375\275\371\342<=\314+\311\275\010\223\213=\037\363V< t\300\275\355}\t\276i\342\366=\213\240s\275\372\006M>\r\'\260\274\275\021\013\276\3105~>\030\t\246\275\"-\017\273g\346G>\243\344\032>\377\266k\276\202\253,<dms\275\376\tW=\267\323%>1g>\275\032\316H\276\217\001^\276M\243\036>\370\213\020\275\277Y\215\276\025{\225\273\004\330\205\274W\253\033\2760\233\340\275\013t<<!B\254\274L\030 \275\347\212\336>\311\320\220=\243\371r<( \265=\231\203\375=\370\270\000=\037\243+\276\255~2\276v\276\211\275\226R\260=iB\032>\335\263\364<\352\235\033>s\201\211=\030\326]>C{S\274\317\275#\276\026\316v>\345\303H\276\216\341}>\030,\254=0\014\031\275\316Yy<\267\223\000>s\223\206=MC\320=\177\2138=\214\307\335=\311\257/\276u<<>\251\366>=\345:d\2756\210H\275\325\036\023\275\037\2214>\204\243\204<\314o\345\274\301\3607\275i\202\214=e?(\275\374:\311=#D\352\275\231\276L<\267\301\300\275%\275\224;3\232,>\272\207\230<\322\033\261\2751\231*\275]\037\234=\305EV=??\033=\021)y\276\345F\021\275\240\217\005\275`\233\250>\307\202@\276=\211\214>\264\327\271=\177\016\026>v\253h\276\004\013\200\276\343\345\271=\305zs\275Q\345\370=\365\371\317\275\302\352\313=\254\200\010\276\221B\216\276?\327\005>\'E\266<\347;\024\276\005v\310\275E\337j=\253\375\007>p\320h=\203\232O<\'\252\207>\336\272T\274\232\"\003\276^\200\004=@\316\221=\240\201\026\273\204\220\300=R\342,\276\376~\323\275\331\034\275\274\"\215\'\276\337k\375=\210K\364\273\251\262]>\025\214\201\275\'\021\034\275\201\020\360\275\364\257\023>\306^\277<\317\344F\274q\034g\276&B\214\274x\010#>;\n\230<\n\211\276<\217R\315<Y%\027\275T\304\332\275\274\365\326=\206_\337=H\302\004>\356K\326=\353\035\037\276\306Ox\273\024\206t=\237r\026>\272&G>\321 \031=l\2101>\357\361\t\275\222R1\274\352L\250=y7[<\333#\006>\276\\\245=q\371.\276\016qH\275\357\030\251\273\212\345Y>\t\362j>\007\202\014\276\364Z\233<=\373\236<\373\352D>\221D\007<\243K\032\275\345\203\r>\206\260\000\276m\253\003\275\216\322\021\276\310M:>\372\251\374=)\016\022\2757\365 \274\332t7=\216\r\225\276\204\017\010\276\n\364\030\276R\3408>I\260\362=\363\230l\275\3052\277\275\233\033f\276\274\262#\274\326\244\220;(&-\276,&\317=?\003\201\275v\302R\276\346f\222\276\327^\313=<\227\240;$\336\226=M0\253\275/\335\334;\025\035\207\276\207\324\031\272\331\337!\276\005\263\022>\016\033\003<\205\277\340\275MX\373\274\275sP=b7d=\242\205}>\0270w=\204X\027>\026~\025<s<-\276~\240\217\274\301{\035\276\346]\344=\322\237\347\274F\345W\276\327\312\300\275\010\246\001>\372\017\232<\006V\246=\346\334 >\326\263\t>\230\245B\276|\212b>\240\325\231\275\376\367\000\276\231\233b\276\tX\210=(\243\010>\266b(>x\364{\276aA\004\276\330|\033\276X9\326\275\330\246i\274\233\022W=\313\360\310\275\362\343\227=%y\357\275:\020;\276\245\212\302=\024\363\350\275\376 \357\275\261.%=\300\017,>}_P\276nN*=\016\232\024\276\371\"\241\275\225\266d\276\201P\320=s\301\361<5\226?\276i\203\367=AF\257\275\031\253Q=\262q\201\275\371\272\363\274\014yA=\336\224c\275\356\302\000\275:\346\017\275\3034\372\2741D5\276\333\336_>\023T\221=i\276n\275\311y\302\275\272:\223>\324P\376\2745\316\344=V}\356=3h\265\275\321_b<\377AG\276\303\253t9Q\005\216=\307\036p= \370\007\275R\374 >\241\370\036\276\364\247\240\275v\273[\275\234\2504>\\xw=\331/\236\275\246.\325\275+\013\307\275f\352\253=\036f\252=\001P\364\275\241\327\250>\001\356\010=Ig\274<\344\203\353=\272\207\272<\355-\037\276\033nu\275\351@\213>V\266\272\275^{\030\276D\002\227\275wQZ\275\006\220\324\275\231\221\203=\315\214Q\275\241A\346\275\251\246\206\276E\035\216=X\357\342;E\235\267\275.\2159>ax\240>S\313!\276\252o#\274\374W.=\207\215\016\275#\354]\275\232\016*>\227N\252\275W2\005<\026<x>\034O\022<\033\023K>\2642\240\275%\333\371\275\224\016\206>q\300\206\274#\021\006>_\220x\275\224n-\275\360\003\362=%_\276;L\373W\275k:\344\274\377\266)<\025\214\334\275\214~\273<kx\237=\357\213\004\275\344:\260\275\t\217\225\275%\n\353=\342u\224>mcD=\0310(>\363\007\313=a\371 =^z\003>$\007[=\306\322@\274\202\323/=\334\363\026=\226\201\270\275\343[\250\275\222\037\204<\341\357\002\276\201\256i\276\224\3725>\007\214V>bO\275=t\350\021>\025A?\276\n\270h>o\254q\276\000\022\362<\372n\272\2756<\364\273|\232\371=\340\323\\=Z\214\246=o\236\254\275b\302\240\275\310s\017=\350\215\265=\352\373f>\031\3711=\356i\223>F\372\030>\030@\312=KDq> \356\364=\333\222\010\276\276\355j\276Y\317p=\237\\\221\274+\370P\276\266&\033>\264\357!>\256\211\013\275\311:\016\275\304c\256=\214gJ>\001\000B=\331G\032\275q\360\221=\354\363\335=\216$a>@o4>\233\341\374\275M\025\263=y\276\241\275g\202\034>\267\334\035=\370\334\004>\346\322=\276\233V\205>Hf\026>g\037\337\275\305\302\333\2753\364\027\276\310{\360\275\227<\206=r\276\341=\326aw:\333\354\345\275\005W\026\276\353\227o\276 05\276mi\177<\2137\270\275\222)\365\275a\336\201\276\367\r\017\276\353U\242\275Na0\275\253V:>\207\357\217\275\022\320\216\276\275\236\345<\257t\211\275\357i\022>\375\212\\\276\342\260%\276\336\256\330<98\320=\314=\346<\303\376\n=!\344\330\275\277\245\224\275.\206\237<\346\335\373\274Yl\312\275\376\255p>\n\017[<D\370\337\275\341X\305<\302s\210\275\327\037\325=\323\246\306\275\014\354\027=\375w\257\276\276\003\004>\210k\226\275YGC=j\316\005\276\341\311\273\275\345\310\004>S&_>e\002\'\276\234:\321=VKP=6\227C\273\014\366\020\275w^\236\275\003\261\371=\010K\353\273\375\334\027\275\244\345\350\274\027\030s\276\373.\323=\320\017\346<\316*a<x\332\243\275\375\207!>\375\3062>\256\353\222\276:\343\352=\nn\210\274O\232\030=l\304I>[\263p;k\346\341\275\030U\177\274\333p\331\274^\346\246\2753\356->\246b\236\275\322\222:=Tt\235=MG\232>\371\334\271=\336m\237>*\373\300\275P\227\317=\003}\374\275\273~8<\203\350N\275\272\241\327\273\336j\231=b\342/>y\334\340\274\342)P>\331\025\217\275\317=\016\273u\233\004\276\361\007\374<\003Y\003\276\233\204n=\025u\016\276u\330\203\275\353b\247;\003_\001\276\3510O>\234\201\341=\222\007\205\275\355p\251\273\360\374\346<%\004\327\275\003DF\276zh\">)L\177\276\220\231C>\001\177\350=\017-\211=\265x\">\327\337\207=\301\244[\276\223!8\275\3405\373=\034\352/\272\324\030\230\275\247\207\333\273l\233\r\276\016\315(<z\202\355<\347\020\022>\206\363\201=\023s\t\276^\0367=L!\'>-#k\275:%\215\275\223a\273\275\003\251\277;\312\322\357\275@/\311\275\na\272\274\230t!=1#\016=%\353e\275\235\326\033>X6&>\240\006\205\273\333C\014>I\367\250=n\033\205>Z\n)\276\001\006\202\27696\310=!\343\252\275>\271\224>\217+\263=\006\275\341=\034`\301=\217\202\361=\321\372\341\274y9^>>)\241=\372\275\374=\371\276l>;T\243<\212\325\222\275\r\312\252>\246\233S\276\306\277g\275i{\315=\354u\272\275)\n\366=\320vr\275-\"R=k\367\374\275+C\213\274\267\326\352\275}\006\230=\337\264\231\275\364\325<\276\323\305\220\274\260\213g>\246e,\275\020\002\305\273\326\264\007\276p\265\202=\373\021\316:\2608W=\366\037y>|OG>\336x\321\275\031\246\263\275\274\244\325=\371\200\311=b\350\037\276\356\373\371\275B\244\222>ZX#>\204\275C=\253\302\004=\356qQ=\305\226T=\254)\220=\223s@=p\305i\276\214\327\024<\324\3707\276\272\374\301\275\360t\023\275\"\362c\275\336#&>o\260\350<\254sN<\262\036\266\275\004>\031>\037|\343<\333\0332>\373\260\302=\364\223\006\276\016\354\300\274\370\006\243<\335S\\\276\333\372\216\2762\365\321\275\036\246\226\276\305\005Z>C\315Y=[\245\236=@pd\276\263rR=\024a=\276\265\341\210\275u\377\342\272)N\303\275\r\237f;\233\304.>R\325\345= \0377\276\345[w\271|\306\306=\273\361\005\274g\336F=\257\364N\275\025m\374\275\262\371\035=3\023\357=u}\345\2747\326\254>\241\247\375<!\232%>y\203=<\224\017\253\274|o\220=0l\036\275\034\274\336=\n\256[>l\204\235\275\224u\025=zD\244=\212~\355=\240\324\233\273au\240<\211x\001\276\255\357/\276\210\300X\275\301<\336\275\r\206L\276\247pt\276\277\225\355\274\"\355\t>=\226S;r\230\326=\243\207\274<b\247\237\275]\241S>\301\334J\276\032\272\236\275\223\266\267\275r\031\261\275g>,\276[\037\t\276\232\363|>\263\334K\274p\2475=\235\006\337=\007`><\020\312\355=e:5\27667u<W\376\240:Qp\022\276\220\"\361\275\031\014\302<\352\333\n>\354D\240\275\366\235%\275\316#\020=\377\013;\276\2370\240\276\356\205\354<\252\\\262\275F\034d\275\243X\203\276\017LW>\016#\363\275s!\215>\343E\'\276\206\0062\274Q\356#\276\376\211\302\275\335[\266\275]\301M>l\020\265\275&f\212\274DK\234=\373\316g\276>\210.\276\340a\377=HJj\275\317\256\336=\314{\260=\315P\200=o#\343\275W^\013>V\270\254\275\350>\376=p\330-=\304\361\313\273j\323\211\275*\241\004\276\317\366\014>?>\304\275A\'3\276\317\033\311\275\201\215\310=9\032@=\020\320\017\276\336h*\276\037:\375<\363i:\276\002u\256=\336\231\366<]\002&>M\025\016>K,\"\275@\256\'\276\236\331/\273\326#\325=\323\223u>\221\350\312\275>v:>\357\347Z\275\010%\345=\363T\363\274\213\243\226\276\201\247\016>kf\206=\300\270>\276,u%<\200k\004\276M\022\215\276K\r\275=\260\220\020\2766\rX\276\302\033\307\275\316\304$;\301P5<Wm\361=\345\376)\276\014\351\202=\231C\362\273U\"\301=MD\237=\262w\n=\225;\217\275\370\337/=Pxs=\002\253\254;m\332\222>%\314\366=\236\2517\276\254\2313\276\036\027\364\275\377\353>=f\207\035\276\267O\221\275\2313\354=\035\246h>\223\224\341<\3671\216=\344c\'\276\234\"\234=J_\020\275R\302\267\275_\266I\276\230H\016>#_b\275h8\365\275\335\375L\276\266\305G\275\030a.=\371$0<\261\221\326\275O\021}\275\366\332\371<\206FD\275v3\331\275\342\242\303\275G\200\025>\\\023\216=>~\025\273D*n=\353\333\026\276\245#+\276\224\373g=\337\356G=\305b2=-_\330=\003\2217\276L\335\275\275p\373\021>J\\\315>\335\225\360\275\205kj>^\336\224\275\204;\350=\326Z\020>Y\'\026>Kd,>0\242\343<F\005\237>?Q\201\275\320\344a=:\001j\276\375\006c=\233g\244<E\225l=\365\243E\276!+R\275\031\304\013\276{kQ\2766\352\204\275\317\234r\276R\211r\275\227\334\310;I8;\273\307\001%<\340\374C>\266\010\345\275\323K\207=\224\354\246=\206\370|\276\217R\204=\241^\252\274\353\3479\275Y\002Y=\324\216u<\232~\237<?c\211=\200\362\236\275\2668\340<\211\365%>\227\327K=\300\037y=\237\234\245\275\270\010W\276\305\261\031\276\326\201C\276\000\310(\276\223AA\274\207\300\016>\265\265\304\274\211\035,>[\327\242=\323\210\031\275\243b\242>\316\031\370\273R\3656>A\331P\275\260\347\203\275\247\350\204>,\n\244=V\256\263=\323\3018>\227\345\357=\344\362\311=l\230\327\271\275\355\260\275\341\2520<Bi\301>\373\247B\276Zv\037\2768+0\275\237\032\330=\353Z(\275l~\365<\315\0078\276\001\006\217\275t\302\025>e\326\004>>W\263\2754a\333\275\2043Y\273\227\237W>\234\340P=(\202>>\206tA=]\250\310\275\030U\316\274\253\024\001\276us\325\275\377\255\017>bkE=\017D\002>\030_\237\275/\272\355\274\000f\252\274\326\222\372\275\025\304\253=\306\\\341\275\311x\332<9\0305=\037\004\262;x\253\243=\227d\306\273\177\344\323<,\201\343=\377\342\000<\372\213*\274\266\036\002=^Kc\276\222IX\275\034\264N>i\023\302=\367\312\206>\332\201\235>\374\370J>\203\260\273\275\233c\307\274\016\335\256\275\332:\201\276\236\020\335=\213\343b=A\357\260;\021\340W\276\036\327\022=\317N\320<7\374,\274w\211\273<\215\\\221<\272@F<[O\272<+\301\002=d\222\302\275\267\0062>\232\331\212\275\370j\274\275\030\222\023==\211\365=&\313\252\275\363\226d=\341\315\205\276\0013T>#\337\'\275O\t\272>\006\230\227<\344\266\005\276X\367+>\207=X\275h\370\001\276N\372\311=\025!\031=\211\266\320<e*\245=\364\324t\275_\361\231=\206\033\313\275\355\304U>\224\301\362=\020\226\'=\327)\002\276\324=\024\276\014\315\245\275\246\211\304\275"
      }
    }
  }
}
node {
  name: "net/recurrent_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
        dim {
          size: 60
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "net/recurrent_kernel/Assign"
  op: "Assign"
  input: "net/recurrent_kernel"
  input: "net/recurrent_kernel/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "net/recurrent_kernel/read"
  op: "Identity"
  input: "net/recurrent_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/recurrent_kernel"
      }
    }
  }
}
node {
  name: "net/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 60
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "net/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 60
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "net/bias/Assign"
  op: "Assign"
  input: "net/bias"
  input: "net/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "net/bias/read"
  op: "Identity"
  input: "net/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/bias"
      }
    }
  }
}
node {
  name: "net/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "net/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\024\000\000\000"
      }
    }
  }
}
node {
  name: "net/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "net/strided_slice"
  op: "StridedSlice"
  input: "net/kernel/read"
  input: "net/strided_slice/stack"
  input: "net/strided_slice/stack_1"
  input: "net/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "net/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "net/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\024\000\000\000"
      }
    }
  }
}
node {
  name: "net/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "net/strided_slice_1"
  op: "StridedSlice"
  input: "net/recurrent_kernel/read"
  input: "net/strided_slice_1/stack"
  input: "net/strided_slice_1/stack_1"
  input: "net/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "net/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\024\000\000\000"
      }
    }
  }
}
node {
  name: "net/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000(\000\000\000"
      }
    }
  }
}
node {
  name: "net/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "net/strided_slice_2"
  op: "StridedSlice"
  input: "net/kernel/read"
  input: "net/strided_slice_2/stack"
  input: "net/strided_slice_2/stack_1"
  input: "net/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "net/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\024\000\000\000"
      }
    }
  }
}
node {
  name: "net/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000(\000\000\000"
      }
    }
  }
}
node {
  name: "net/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "net/strided_slice_3"
  op: "StridedSlice"
  input: "net/recurrent_kernel/read"
  input: "net/strided_slice_3/stack"
  input: "net/strided_slice_3/stack_1"
  input: "net/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "net/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000(\000\000\000"
      }
    }
  }
}
node {
  name: "net/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "net/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "net/strided_slice_4"
  op: "StridedSlice"
  input: "net/kernel/read"
  input: "net/strided_slice_4/stack"
  input: "net/strided_slice_4/stack_1"
  input: "net/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "net/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000(\000\000\000"
      }
    }
  }
}
node {
  name: "net/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "net/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "net/strided_slice_5"
  op: "StridedSlice"
  input: "net/recurrent_kernel/read"
  input: "net/strided_slice_5/stack"
  input: "net/strided_slice_5/stack_1"
  input: "net/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "net/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "net/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 20
      }
    }
  }
}
node {
  name: "net/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "net/strided_slice_6"
  op: "StridedSlice"
  input: "net/bias/read"
  input: "net/strided_slice_6/stack"
  input: "net/strided_slice_6/stack_1"
  input: "net/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "net/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 20
      }
    }
  }
}
node {
  name: "net/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 40
      }
    }
  }
}
node {
  name: "net/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "net/strided_slice_7"
  op: "StridedSlice"
  input: "net/bias/read"
  input: "net/strided_slice_7/stack"
  input: "net/strided_slice_7/stack_1"
  input: "net/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "net/strided_slice_8/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 40
      }
    }
  }
}
node {
  name: "net/strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "net/strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "net/strided_slice_8"
  op: "StridedSlice"
  input: "net/bias/read"
  input: "net/strided_slice_8/stack"
  input: "net/strided_slice_8/stack_1"
  input: "net/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "net/zeros_like"
  op: "ZerosLike"
  input: "net_input"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "net/Sum"
  op: "Sum"
  input: "net/zeros_like"
  input: "net/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "net/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "net/ExpandDims"
  op: "ExpandDims"
  input: "net/Sum"
  input: "net/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "net/Tile/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\024\000\000\000"
      }
    }
  }
}
node {
  name: "net/Tile"
  op: "Tile"
  input: "net/ExpandDims"
  input: "net/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "net/transpose/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "net/transpose"
  op: "Transpose"
  input: "net_input"
  input: "net/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "net/Shape"
  op: "Shape"
  input: "net/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "net/strided_slice_9/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "net/strided_slice_9/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "net/strided_slice_9/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "net/strided_slice_9"
  op: "StridedSlice"
  input: "net/Shape"
  input: "net/strided_slice_9/stack"
  input: "net/strided_slice_9/stack_1"
  input: "net/strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "net/strided_slice_10/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "net/strided_slice_10/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "net/strided_slice_10/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "net/strided_slice_10"
  op: "StridedSlice"
  input: "net/transpose"
  input: "net/strided_slice_10/stack"
  input: "net/strided_slice_10/stack_1"
  input: "net/strided_slice_10/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "net/ones_like/Shape"
  op: "Shape"
  input: "net/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "net/ones_like/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "net/ones_like"
  op: "Fill"
  input: "net/ones_like/Shape"
  input: "net/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "net/mul"
  op: "Mul"
  input: "net/strided_slice_10"
  input: "net/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/mul_1"
  op: "Mul"
  input: "net/strided_slice_10"
  input: "net/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/mul_2"
  op: "Mul"
  input: "net/strided_slice_10"
  input: "net/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/MatMul"
  op: "MatMul"
  input: "net/mul"
  input: "net/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "net/MatMul_1"
  op: "MatMul"
  input: "net/mul_1"
  input: "net/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "net/MatMul_2"
  op: "MatMul"
  input: "net/mul_2"
  input: "net/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "net/BiasAdd"
  op: "BiasAdd"
  input: "net/MatMul"
  input: "net/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "net/BiasAdd_1"
  op: "BiasAdd"
  input: "net/MatMul_1"
  input: "net/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "net/BiasAdd_2"
  op: "BiasAdd"
  input: "net/MatMul_2"
  input: "net/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "net/MatMul_3"
  op: "MatMul"
  input: "net/Tile"
  input: "net/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "net/MatMul_4"
  op: "MatMul"
  input: "net/Tile"
  input: "net/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "net/add"
  op: "Add"
  input: "net/BiasAdd"
  input: "net/MatMul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/mul_3/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.2
      }
    }
  }
}
node {
  name: "net/mul_3"
  op: "Mul"
  input: "net/mul_3/x"
  input: "net/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/add_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "net/add_1"
  op: "Add"
  input: "net/mul_3"
  input: "net/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "net/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "net/clip_by_value/Minimum"
  op: "Minimum"
  input: "net/add_1"
  input: "net/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/clip_by_value"
  op: "Maximum"
  input: "net/clip_by_value/Minimum"
  input: "net/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/add_2"
  op: "Add"
  input: "net/BiasAdd_1"
  input: "net/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/mul_4/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.2
      }
    }
  }
}
node {
  name: "net/mul_4"
  op: "Mul"
  input: "net/mul_4/x"
  input: "net/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/add_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "net/add_3"
  op: "Add"
  input: "net/mul_4"
  input: "net/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "net/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "net/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "net/add_3"
  input: "net/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/clip_by_value_1"
  op: "Maximum"
  input: "net/clip_by_value_1/Minimum"
  input: "net/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/mul_5"
  op: "Mul"
  input: "net/clip_by_value_1"
  input: "net/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/MatMul_5"
  op: "MatMul"
  input: "net/mul_5"
  input: "net/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "net/add_4"
  op: "Add"
  input: "net/BiasAdd_2"
  input: "net/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/mul_6"
  op: "Mul"
  input: "net/clip_by_value"
  input: "net/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "net/sub"
  op: "Sub"
  input: "net/sub/x"
  input: "net/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/mul_7"
  op: "Mul"
  input: "net/sub"
  input: "net/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/add_5"
  op: "Add"
  input: "net/mul_6"
  input: "net/mul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/TensorArray"
  op: "TensorArrayV3"
  input: "net/strided_slice_9"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "output_ta"
    }
  }
}
node {
  name: "net/zeros_like_1"
  op: "ZerosLike"
  input: "net/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/TensorArray_1"
  op: "TensorArrayV3"
  input: "net/strided_slice_9"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "input_ta"
    }
  }
}
node {
  name: "net/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "net/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "net/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "net/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "net/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "net/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "net/TensorArrayUnstack/Shape"
  input: "net/TensorArrayUnstack/strided_slice/stack"
  input: "net/TensorArrayUnstack/strided_slice/stack_1"
  input: "net/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "net/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "net/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "net/TensorArrayUnstack/range"
  op: "Range"
  input: "net/TensorArrayUnstack/range/start"
  input: "net/TensorArrayUnstack/strided_slice"
  input: "net/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "net/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "net/TensorArray_1"
  input: "net/TensorArrayUnstack/range"
  input: "net/transpose"
  input: "net/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/transpose"
      }
    }
  }
}
node {
  name: "net/time"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "net/while/maximum_iterations"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 29
      }
    }
  }
}
node {
  name: "net/while/iteration_counter"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "net/while/Enter"
  op: "Enter"
  input: "net/while/iteration_counter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "net/while/Enter_1"
  op: "Enter"
  input: "net/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "net/while/Enter_2"
  op: "Enter"
  input: "net/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "net/while/Enter_3"
  op: "Enter"
  input: "net/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "net/while/Merge"
  op: "Merge"
  input: "net/while/Enter"
  input: "net/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "net/while/Merge_1"
  op: "Merge"
  input: "net/while/Enter_1"
  input: "net/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "net/while/Merge_2"
  op: "Merge"
  input: "net/while/Enter_2"
  input: "net/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/Merge_3"
  op: "Merge"
  input: "net/while/Enter_3"
  input: "net/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/Less"
  op: "Less"
  input: "net/while/Merge"
  input: "net/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "net/while/Less/Enter"
  op: "Enter"
  input: "net/while/maximum_iterations"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "net/while/Less_1"
  op: "Less"
  input: "net/while/Merge_1"
  input: "net/while/Less_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "net/while/Less_1/Enter"
  op: "Enter"
  input: "net/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "net/while/LogicalAnd"
  op: "LogicalAnd"
  input: "net/while/Less"
  input: "net/while/Less_1"
}
node {
  name: "net/while/LoopCond"
  op: "LoopCond"
  input: "net/while/LogicalAnd"
}
node {
  name: "net/while/Switch"
  op: "Switch"
  input: "net/while/Merge"
  input: "net/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Merge"
      }
    }
  }
}
node {
  name: "net/while/Switch_1"
  op: "Switch"
  input: "net/while/Merge_1"
  input: "net/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Merge_1"
      }
    }
  }
}
node {
  name: "net/while/Switch_2"
  op: "Switch"
  input: "net/while/Merge_2"
  input: "net/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Merge_2"
      }
    }
  }
}
node {
  name: "net/while/Switch_3"
  op: "Switch"
  input: "net/while/Merge_3"
  input: "net/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Merge_3"
      }
    }
  }
}
node {
  name: "net/while/Identity"
  op: "Identity"
  input: "net/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "net/while/Identity_1"
  op: "Identity"
  input: "net/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "net/while/Identity_2"
  op: "Identity"
  input: "net/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/Identity_3"
  op: "Identity"
  input: "net/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/add/y"
  op: "Const"
  input: "^net/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "net/while/add"
  op: "Add"
  input: "net/while/Identity"
  input: "net/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "net/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "net/while/TensorArrayReadV3/Enter"
  input: "net/while/Identity_1"
  input: "net/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "net/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "net/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "net/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "net/while/mul"
  op: "Mul"
  input: "net/while/TensorArrayReadV3"
  input: "net/while/mul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/mul/Enter"
  op: "Enter"
  input: "net/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "net/while/mul_1"
  op: "Mul"
  input: "net/while/TensorArrayReadV3"
  input: "net/while/mul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/mul_2"
  op: "Mul"
  input: "net/while/TensorArrayReadV3"
  input: "net/while/mul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/MatMul"
  op: "MatMul"
  input: "net/while/mul"
  input: "net/while/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "net/while/MatMul/Enter"
  op: "Enter"
  input: "net/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "net/while/MatMul_1"
  op: "MatMul"
  input: "net/while/mul_1"
  input: "net/while/MatMul_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "net/while/MatMul_1/Enter"
  op: "Enter"
  input: "net/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "net/while/MatMul_2"
  op: "MatMul"
  input: "net/while/mul_2"
  input: "net/while/MatMul_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "net/while/MatMul_2/Enter"
  op: "Enter"
  input: "net/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "net/while/BiasAdd"
  op: "BiasAdd"
  input: "net/while/MatMul"
  input: "net/while/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "net/while/BiasAdd/Enter"
  op: "Enter"
  input: "net/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "net/while/BiasAdd_1"
  op: "BiasAdd"
  input: "net/while/MatMul_1"
  input: "net/while/BiasAdd_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "net/while/BiasAdd_1/Enter"
  op: "Enter"
  input: "net/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "net/while/BiasAdd_2"
  op: "BiasAdd"
  input: "net/while/MatMul_2"
  input: "net/while/BiasAdd_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "net/while/BiasAdd_2/Enter"
  op: "Enter"
  input: "net/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "net/while/MatMul_3"
  op: "MatMul"
  input: "net/while/Identity_3"
  input: "net/while/MatMul_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "net/while/MatMul_3/Enter"
  op: "Enter"
  input: "net/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "net/while/MatMul_4"
  op: "MatMul"
  input: "net/while/Identity_3"
  input: "net/while/MatMul_4/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "net/while/MatMul_4/Enter"
  op: "Enter"
  input: "net/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "net/while/add_1"
  op: "Add"
  input: "net/while/BiasAdd"
  input: "net/while/MatMul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/mul_3/x"
  op: "Const"
  input: "^net/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.2
      }
    }
  }
}
node {
  name: "net/while/mul_3"
  op: "Mul"
  input: "net/while/mul_3/x"
  input: "net/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/add_2/y"
  op: "Const"
  input: "^net/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "net/while/add_2"
  op: "Add"
  input: "net/while/mul_3"
  input: "net/while/add_2/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/Const"
  op: "Const"
  input: "^net/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "net/while/Const_1"
  op: "Const"
  input: "^net/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "net/while/clip_by_value/Minimum"
  op: "Minimum"
  input: "net/while/add_2"
  input: "net/while/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/clip_by_value"
  op: "Maximum"
  input: "net/while/clip_by_value/Minimum"
  input: "net/while/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/add_3"
  op: "Add"
  input: "net/while/BiasAdd_1"
  input: "net/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/mul_4/x"
  op: "Const"
  input: "^net/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.2
      }
    }
  }
}
node {
  name: "net/while/mul_4"
  op: "Mul"
  input: "net/while/mul_4/x"
  input: "net/while/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/add_4/y"
  op: "Const"
  input: "^net/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "net/while/add_4"
  op: "Add"
  input: "net/while/mul_4"
  input: "net/while/add_4/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/Const_2"
  op: "Const"
  input: "^net/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "net/while/Const_3"
  op: "Const"
  input: "^net/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "net/while/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "net/while/add_4"
  input: "net/while/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/clip_by_value_1"
  op: "Maximum"
  input: "net/while/clip_by_value_1/Minimum"
  input: "net/while/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/mul_5"
  op: "Mul"
  input: "net/while/clip_by_value_1"
  input: "net/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/MatMul_5"
  op: "MatMul"
  input: "net/while/mul_5"
  input: "net/while/MatMul_5/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "net/while/MatMul_5/Enter"
  op: "Enter"
  input: "net/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "net/while/add_5"
  op: "Add"
  input: "net/while/BiasAdd_2"
  input: "net/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/mul_6"
  op: "Mul"
  input: "net/while/clip_by_value"
  input: "net/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/sub/x"
  op: "Const"
  input: "^net/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "net/while/sub"
  op: "Sub"
  input: "net/while/sub/x"
  input: "net/while/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/mul_7"
  op: "Mul"
  input: "net/while/sub"
  input: "net/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/add_6"
  op: "Add"
  input: "net/while/mul_6"
  input: "net/while/mul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "net/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "net/while/Identity_1"
  input: "net/while/add_6"
  input: "net/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_6"
      }
    }
  }
}
node {
  name: "net/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "net/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "net/while/add_7/y"
  op: "Const"
  input: "^net/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "net/while/add_7"
  op: "Add"
  input: "net/while/Identity_1"
  input: "net/while/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "net/while/NextIteration"
  op: "NextIteration"
  input: "net/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "net/while/NextIteration_1"
  op: "NextIteration"
  input: "net/while/add_7"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "net/while/NextIteration_2"
  op: "NextIteration"
  input: "net/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/NextIteration_3"
  op: "NextIteration"
  input: "net/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/Exit"
  op: "Exit"
  input: "net/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "net/while/Exit_1"
  op: "Exit"
  input: "net/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "net/while/Exit_2"
  op: "Exit"
  input: "net/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/Exit_3"
  op: "Exit"
  input: "net/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "net/TensorArray"
  input: "net/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/TensorArray"
      }
    }
  }
}
node {
  name: "net/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "net/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "net/TensorArrayStack/range"
  op: "Range"
  input: "net/TensorArrayStack/range/start"
  input: "net/TensorArrayStack/TensorArraySizeV3"
  input: "net/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/TensorArray"
      }
    }
  }
}
node {
  name: "net/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "net/TensorArray"
  input: "net/TensorArrayStack/range"
  input: "net/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 20
        }
      }
    }
  }
}
node {
  name: "net/sub_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "net/sub_1"
  op: "Sub"
  input: "net/while/Exit_1"
  input: "net/sub_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "net/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "net/TensorArray"
  input: "net/sub_1"
  input: "net/while/Exit_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/transpose_1/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "net/transpose_1"
  op: "Transpose"
  input: "net/TensorArrayStack/TensorArrayGatherV3"
  input: "net/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dense_1/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\024\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dense_1/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.53452247
      }
    }
  }
}
node {
  name: "dense_1/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.53452247
      }
    }
  }
}
node {
  name: "dense_1/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dense_1/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 5027389
    }
  }
}
node {
  name: "dense_1/random_uniform/sub"
  op: "Sub"
  input: "dense_1/random_uniform/max"
  input: "dense_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/random_uniform/mul"
  op: "Mul"
  input: "dense_1/random_uniform/RandomUniform"
  input: "dense_1/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/random_uniform"
  op: "Add"
  input: "dense_1/random_uniform/mul"
  input: "dense_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_1/kernel/Assign"
  op: "Assign"
  input: "dense_1/kernel"
  input: "dense_1/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_1/kernel/read"
  op: "Identity"
  input: "dense_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
}
node {
  name: "dense_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_1/bias/Assign"
  op: "Assign"
  input: "dense_1/bias"
  input: "dense_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_1/bias/read"
  op: "Identity"
  input: "dense_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
}
node {
  name: "dense_1/MatMul"
  op: "MatMul"
  input: "net/TensorArrayReadV3"
  input: "dense_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense_1/BiasAdd"
  op: "BiasAdd"
  input: "dense_1/MatMul"
  input: "dense_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dense_1/Sigmoid"
  op: "Sigmoid"
  input: "dense_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 13
        }
        dim {
          size: 60
        }
      }
    }
  }
}
node {
  name: "Assign"
  op: "Assign"
  input: "net/kernel"
  input: "Placeholder"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_1"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
        dim {
          size: 60
        }
      }
    }
  }
}
node {
  name: "Assign_1"
  op: "Assign"
  input: "net/recurrent_kernel"
  input: "Placeholder_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_2"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 60
        }
      }
    }
  }
}
node {
  name: "Assign_2"
  op: "Assign"
  input: "net/bias"
  input: "Placeholder_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_3"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_3"
  op: "Assign"
  input: "dense_1/kernel"
  input: "Placeholder_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_4"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_4"
  op: "Assign"
  input: "dense_1/bias"
  input: "Placeholder_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "net/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "net/recurrent_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/recurrent_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "net/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "dense_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "dense_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^dense_1/bias/Assign"
  input: "^dense_1/kernel/Assign"
  input: "^net/bias/Assign"
  input: "^net/kernel/Assign"
  input: "^net/recurrent_kernel/Assign"
}
node {
  name: "RMSprop/lr/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.001
      }
    }
  }
}
node {
  name: "RMSprop/lr"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "RMSprop/lr/Assign"
  op: "Assign"
  input: "RMSprop/lr"
  input: "RMSprop/lr/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/lr"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "RMSprop/lr/read"
  op: "Identity"
  input: "RMSprop/lr"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/lr"
      }
    }
  }
}
node {
  name: "RMSprop/rho/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.89999998
      }
    }
  }
}
node {
  name: "RMSprop/rho"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "RMSprop/rho/Assign"
  op: "Assign"
  input: "RMSprop/rho"
  input: "RMSprop/rho/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/rho"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "RMSprop/rho/read"
  op: "Identity"
  input: "RMSprop/rho"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/rho"
      }
    }
  }
}
node {
  name: "RMSprop/decay/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "RMSprop/decay"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "RMSprop/decay/Assign"
  op: "Assign"
  input: "RMSprop/decay"
  input: "RMSprop/decay/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/decay"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "RMSprop/decay/read"
  op: "Identity"
  input: "RMSprop/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/decay"
      }
    }
  }
}
node {
  name: "RMSprop/iterations/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "RMSprop/iterations"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "RMSprop/iterations/Assign"
  op: "Assign"
  input: "RMSprop/iterations"
  input: "RMSprop/iterations/initial_value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/iterations"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "RMSprop/iterations/read"
  op: "Identity"
  input: "RMSprop/iterations"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/iterations"
      }
    }
  }
}
node {
  name: "dense_1_target"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "dense_1_sample_weights"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "loss/dense_1_loss/add/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "loss/dense_1_loss/add"
  op: "Add"
  input: "loss/dense_1_loss/add/x"
  input: "dense_1_target"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_1_loss/Neg"
  op: "Neg"
  input: "loss/dense_1_loss/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_1_loss/add_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "loss/dense_1_loss/add_1"
  op: "Add"
  input: "loss/dense_1_loss/add_1/x"
  input: "dense_1/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_1_loss/add_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1e-07
      }
    }
  }
}
node {
  name: "loss/dense_1_loss/add_2"
  op: "Add"
  input: "loss/dense_1_loss/add_1"
  input: "loss/dense_1_loss/add_2/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_1_loss/Log"
  op: "Log"
  input: "loss/dense_1_loss/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_1_loss/mul"
  op: "Mul"
  input: "loss/dense_1_loss/Neg"
  input: "loss/dense_1_loss/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_1_loss/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/dense_1_loss/sub"
  op: "Sub"
  input: "loss/dense_1_loss/sub/x"
  input: "dense_1_target"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_1_loss/Neg_1"
  op: "Neg"
  input: "loss/dense_1_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_1_loss/sub_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/dense_1_loss/sub_1"
  op: "Sub"
  input: "loss/dense_1_loss/sub_1/x"
  input: "dense_1/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_1_loss/add_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1e-07
      }
    }
  }
}
node {
  name: "loss/dense_1_loss/add_3"
  op: "Add"
  input: "loss/dense_1_loss/sub_1"
  input: "loss/dense_1_loss/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_1_loss/Log_1"
  op: "Log"
  input: "loss/dense_1_loss/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_1_loss/mul_1"
  op: "Mul"
  input: "loss/dense_1_loss/Neg_1"
  input: "loss/dense_1_loss/Log_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_1_loss/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "loss/dense_1_loss/Mean"
  op: "Mean"
  input: "loss/dense_1_loss/mul_1"
  input: "loss/dense_1_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/dense_1_loss/mul_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.89999998
      }
    }
  }
}
node {
  name: "loss/dense_1_loss/mul_2"
  op: "Mul"
  input: "loss/dense_1_loss/mul_2/x"
  input: "loss/dense_1_loss/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_1_loss/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "loss/dense_1_loss/Mean_1"
  op: "Mean"
  input: "loss/dense_1_loss/mul"
  input: "loss/dense_1_loss/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/dense_1_loss/mul_3/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.1
      }
    }
  }
}
node {
  name: "loss/dense_1_loss/mul_3"
  op: "Mul"
  input: "loss/dense_1_loss/mul_3/x"
  input: "loss/dense_1_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_1_loss/add_4"
  op: "Add"
  input: "loss/dense_1_loss/mul_2"
  input: "loss/dense_1_loss/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_1_loss/Mean_2/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "loss/dense_1_loss/Mean_2"
  op: "Mean"
  input: "loss/dense_1_loss/add_4"
  input: "loss/dense_1_loss/Mean_2/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/dense_1_loss/mul_4"
  op: "Mul"
  input: "loss/dense_1_loss/Mean_2"
  input: "dense_1_sample_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_1_loss/NotEqual/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "loss/dense_1_loss/NotEqual"
  op: "NotEqual"
  input: "dense_1_sample_weights"
  input: "loss/dense_1_loss/NotEqual/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_1_loss/Cast"
  op: "Cast"
  input: "loss/dense_1_loss/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "loss/dense_1_loss/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/dense_1_loss/Mean_3"
  op: "Mean"
  input: "loss/dense_1_loss/Cast"
  input: "loss/dense_1_loss/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/dense_1_loss/truediv"
  op: "RealDiv"
  input: "loss/dense_1_loss/mul_4"
  input: "loss/dense_1_loss/Mean_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_1_loss/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/dense_1_loss/Mean_4"
  op: "Mean"
  input: "loss/dense_1_loss/truediv"
  input: "loss/dense_1_loss/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/mul"
  op: "Mul"
  input: "loss/mul/x"
  input: "loss/dense_1_loss/Mean_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/acc/Round"
  op: "Round"
  input: "dense_1/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/acc/Equal"
  op: "Equal"
  input: "dense_1_target"
  input: "metrics/acc/Round"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/acc/Cast"
  op: "Cast"
  input: "metrics/acc/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "metrics/acc/Mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "metrics/acc/Mean"
  op: "Mean"
  input: "metrics/acc/Cast"
  input: "metrics/acc/Mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "metrics/acc/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "metrics/acc/Mean_1"
  op: "Mean"
  input: "metrics/acc/Mean"
  input: "metrics/acc/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/grad_ys_0"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Fill"
  op: "Fill"
  input: "training/RMSprop/gradients/Shape"
  input: "training/RMSprop/gradients/grad_ys_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/mul"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/f_count"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Exit_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/f_count_1"
  op: "Enter"
  input: "training/RMSprop/gradients/f_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/Merge"
  op: "Merge"
  input: "training/RMSprop/gradients/f_count_1"
  input: "training/RMSprop/gradients/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/Merge"
  input: "net/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Add/y"
  op: "Const"
  input: "^net/while/Identity"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Exit_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Add"
  op: "Add"
  input: "training/RMSprop/gradients/Switch:1"
  input: "training/RMSprop/gradients/Add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/Add"
  input: "^training/RMSprop/gradients/net/while/MatMul_1_grad/MatMul_1/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/MatMul_2_grad/MatMul_1/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/MatMul_5_grad/MatMul_1/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/MatMul_grad/MatMul_1/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/RMSprop/gradients/net/while/add_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/RMSprop/gradients/net/while/add_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/RMSprop/gradients/net/while/add_6_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/add_6_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/clip_by_value_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/clip_by_value_grad/GreaterEqual/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/mul_3_grad/Mul/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/mul_4_grad/Mul/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/RMSprop/gradients/net/while/mul_5_grad/Mul_1/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/RMSprop/gradients/net/while/mul_6_grad/Mul/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/mul_6_grad/Mul_1/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/RMSprop/gradients/net/while/mul_7_grad/Mul/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/mul_7_grad/Mul_1/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/sub_grad/BroadcastGradientArgs/StackPushV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/f_count_2"
  op: "Exit"
  input: "training/RMSprop/gradients/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/b_count"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Exit_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/b_count_1"
  op: "Enter"
  input: "training/RMSprop/gradients/f_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/Merge_1"
  op: "Merge"
  input: "training/RMSprop/gradients/b_count_1"
  input: "training/RMSprop/gradients/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/GreaterEqual"
  op: "GreaterEqual"
  input: "training/RMSprop/gradients/Merge_1"
  input: "training/RMSprop/gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/GreaterEqual/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/b_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/b_count_2"
  op: "LoopCond"
  input: "training/RMSprop/gradients/GreaterEqual"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Switch_1"
  op: "Switch"
  input: "training/RMSprop/gradients/Merge_1"
  input: "training/RMSprop/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Sub"
  op: "Sub"
  input: "training/RMSprop/gradients/Switch_1:1"
  input: "training/RMSprop/gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/NextIteration_1"
  op: "NextIteration"
  input: "training/RMSprop/gradients/Sub"
  input: "^training/RMSprop/gradients/net/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/b_count_3"
  op: "Exit"
  input: "training/RMSprop/gradients/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/mul_grad/Mul"
  op: "Mul"
  input: "training/RMSprop/gradients/Fill"
  input: "loss/dense_1_loss/Mean_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/mul_grad/Mul_1"
  op: "Mul"
  input: "training/RMSprop/gradients/Fill"
  input: "loss/mul/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/loss/mul_grad/Mul_1"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/Shape"
  op: "Shape"
  input: "loss/dense_1_loss/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/Tile"
  op: "Tile"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/Shape_1"
  op: "Shape"
  input: "loss/dense_1_loss/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/Shape_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/Prod"
  op: "Prod"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/Shape_1"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/Prod_1"
  op: "Prod"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/Shape_2"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/Maximum"
  op: "Maximum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/Prod_1"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/floordiv"
  op: "FloorDiv"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/Prod"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/Cast"
  op: "Cast"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/floordiv"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/truediv"
  op: "RealDiv"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/Tile"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/Shape"
  op: "Shape"
  input: "loss/dense_1_loss/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/truediv"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/truediv"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/Shape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/truediv"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/RealDiv"
  op: "RealDiv"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/truediv"
  input: "loss/dense_1_loss/Mean_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/truediv"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/RealDiv"
  input: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/truediv"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/Sum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/truediv"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/Neg"
  op: "Neg"
  input: "loss/dense_1_loss/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/truediv"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/RealDiv_1"
  op: "RealDiv"
  input: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/Neg"
  input: "loss/dense_1_loss/Mean_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/truediv"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/RealDiv_2"
  op: "RealDiv"
  input: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/RealDiv_1"
  input: "loss/dense_1_loss/Mean_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/truediv"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/mul"
  op: "Mul"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/truediv"
  input: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/truediv"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/mul"
  input: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/truediv"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/Sum_1"
  input: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/truediv"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_4_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_4_grad/Shape_1"
  op: "Shape"
  input: "dense_1_sample_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_4_grad/Shape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_4_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_4_grad/Mul"
  op: "Mul"
  input: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/Reshape"
  input: "dense_1_sample_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_4_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_4_grad/Mul"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_4_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_4_grad/Sum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_4_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_4_grad/Mul_1"
  op: "Mul"
  input: "loss/dense_1_loss/Mean_2"
  input: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_4_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_4_grad/Mul_1"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_4_grad/Sum_1"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_4_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_2_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_2_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_4_grad/Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_2_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_2_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_2_grad/Tile"
  op: "Tile"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_2_grad/Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_2_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_2_grad/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_2_grad/truediv"
  op: "RealDiv"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_2_grad/Tile"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_2_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_2_grad/Mul"
  op: "Mul"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_2_grad/truediv"
  input: "loss/dense_1_loss/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_2_grad/Mul_1"
  op: "Mul"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_2_grad/truediv"
  input: "loss/dense_1_loss/mul_2/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_3_grad/Mul"
  op: "Mul"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_2_grad/truediv"
  input: "loss/dense_1_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_3_grad/Mul_1"
  op: "Mul"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_2_grad/truediv"
  input: "loss/dense_1_loss/mul_3/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_2_grad/Mul_1"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/Shape"
  op: "Shape"
  input: "loss/dense_1_loss/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/Tile"
  op: "Tile"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/Shape_1"
  op: "Shape"
  input: "loss/dense_1_loss/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/Shape_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/Prod"
  op: "Prod"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/Shape_1"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/Prod_1"
  op: "Prod"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/Shape_2"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/Maximum"
  op: "Maximum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/Prod_1"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/floordiv"
  op: "FloorDiv"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/Prod"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/Cast"
  op: "Cast"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/floordiv"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/truediv"
  op: "RealDiv"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/Tile"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_3_grad/Mul_1"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/Shape"
  op: "Shape"
  input: "loss/dense_1_loss/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/Tile"
  op: "Tile"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/Shape_1"
  op: "Shape"
  input: "loss/dense_1_loss/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/Shape_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/Prod"
  op: "Prod"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/Shape_1"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/Prod_1"
  op: "Prod"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/Shape_2"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/Maximum"
  op: "Maximum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/Prod_1"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/floordiv"
  op: "FloorDiv"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/Prod"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/Cast"
  op: "Cast"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/floordiv"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/truediv"
  op: "RealDiv"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/Tile"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_1_grad/Shape"
  op: "Shape"
  input: "loss/dense_1_loss/Neg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_1_grad/Shape_1"
  op: "Shape"
  input: "loss/dense_1_loss/Log_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_1_grad/Shape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_1_grad/Mul"
  op: "Mul"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/truediv"
  input: "loss/dense_1_loss/Log_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_1_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_1_grad/Mul"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_1_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_1_grad/Sum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_1_grad/Mul_1"
  op: "Mul"
  input: "loss/dense_1_loss/Neg_1"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_1_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_1_grad/Mul_1"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_1_grad/Sum_1"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_grad/Shape"
  op: "Shape"
  input: "loss/dense_1_loss/Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_grad/Shape_1"
  op: "Shape"
  input: "loss/dense_1_loss/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_grad/Shape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_grad/Mul"
  op: "Mul"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/truediv"
  input: "loss/dense_1_loss/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_grad/Mul"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_grad/Sum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_grad/Mul_1"
  op: "Mul"
  input: "loss/dense_1_loss/Neg"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_grad/Mul_1"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_grad/Sum_1"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Log_1_grad/Reciprocal"
  op: "Reciprocal"
  input: "loss/dense_1_loss/add_3"
  input: "^training/RMSprop/gradients/loss/dense_1_loss/mul_1_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Log_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Log_1_grad/mul"
  op: "Mul"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_1_grad/Reshape_1"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Log_1_grad/Reciprocal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Log_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Log_grad/Reciprocal"
  op: "Reciprocal"
  input: "loss/dense_1_loss/add_2"
  input: "^training/RMSprop/gradients/loss/dense_1_loss/mul_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Log"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Log_grad/mul"
  op: "Mul"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_grad/Reshape_1"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Log_grad/Reciprocal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Log"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/add_3_grad/Shape"
  op: "Shape"
  input: "loss/dense_1_loss/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/add_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/add_3_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/add_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_3_grad/Shape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/add_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/add_3_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Log_1_grad/mul"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/add_3_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_3_grad/Sum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_3_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/add_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/add_3_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Log_1_grad/mul"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/add_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_3_grad/Sum_1"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/add_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/add_2_grad/Shape"
  op: "Shape"
  input: "loss/dense_1_loss/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/add_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/add_2_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/add_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_2_grad/Shape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/add_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/add_2_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Log_grad/mul"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/add_2_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_2_grad/Sum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/add_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/add_2_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Log_grad/mul"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/add_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_2_grad/Sum_1"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/add_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/sub_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/sub_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/sub_1_grad/Shape_1"
  op: "Shape"
  input: "dense_1/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/sub_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/sub_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/loss/dense_1_loss/sub_1_grad/Shape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/sub_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/sub_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/sub_1_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_3_grad/Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/sub_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/sub_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/sub_1_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/sub_1_grad/Sum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/sub_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/sub_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/sub_1_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_3_grad/Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/sub_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/sub_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/sub_1_grad/Neg"
  op: "Neg"
  input: "training/RMSprop/gradients/loss/dense_1_loss/sub_1_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/sub_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/sub_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/sub_1_grad/Neg"
  input: "training/RMSprop/gradients/loss/dense_1_loss/sub_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/sub_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/add_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/add_1_grad/Shape_1"
  op: "Shape"
  input: "dense_1/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/add_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_1_grad/Shape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/add_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/add_1_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_2_grad/Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/add_1_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_1_grad/Sum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/add_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/add_1_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_2_grad/Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_1_grad/Sum_1"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/add_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/AddN"
  op: "AddN"
  input: "training/RMSprop/gradients/loss/dense_1_loss/sub_1_grad/Reshape_1"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_1_grad/Reshape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/sub_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/dense_1/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "dense_1/Sigmoid"
  input: "training/RMSprop/gradients/AddN"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/Sigmoid"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/dense_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/RMSprop/gradients/dense_1/Sigmoid_grad/SigmoidGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/RMSprop/gradients/dense_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/RMSprop/gradients/dense_1/Sigmoid_grad/SigmoidGrad"
  input: "dense_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/dense_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "net/TensorArrayReadV3"
  input: "training/RMSprop/gradients/dense_1/Sigmoid_grad/SigmoidGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "net/TensorArray"
  input: "net/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/TensorArray"
        s: "loc:@net/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/RMSprop/gradients"
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "net/while/Exit_2"
  input: "^training/RMSprop/gradients/net/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/TensorArray"
        s: "loc:@net/TensorArrayReadV3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "training/RMSprop/gradients/net/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "net/sub_1"
  input: "training/RMSprop/gradients/dense_1/MatMul_grad/MatMul"
  input: "training/RMSprop/gradients/net/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/TensorArrayReadV3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/zeros_like"
  op: "ZerosLike"
  input: "net/while/Exit_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "training/RMSprop/gradients/net/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "training/RMSprop/gradients/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Exit_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "training/RMSprop/gradients/net/while/Exit_2_grad/b_exit"
  input: "training/RMSprop/gradients/net/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "training/RMSprop/gradients/net/while/Exit_3_grad/b_exit"
  input: "training/RMSprop/gradients/net/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/net/while/Switch_2_grad/b_switch"
  input: "training/RMSprop/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/net/while/Switch_3_grad/b_switch"
  input: "training/RMSprop/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "training/RMSprop/gradients/net/while/Merge_2_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Enter_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "training/RMSprop/gradients/net/while/Merge_3_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Enter_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "training/RMSprop/gradients/net/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "training/RMSprop/gradients/net/while/Merge_2_grad/Switch:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_6"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/RMSprop/gradients"
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "net/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/RMSprop/gradients/net/while/Merge_2_grad/Switch:1"
  input: "^training/RMSprop/gradients/net/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_6"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "training/RMSprop/gradients/net/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "training/RMSprop/gradients/net/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "training/RMSprop/gradients/net/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Identity_1"
        s: "loc:@net/while/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Identity_1"
        s: "loc:@net/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  input: "net/while/Identity_1"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^training/RMSprop/gradients/net/while/MatMul_1_grad/MatMul_1/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/MatMul_2_grad/MatMul_1/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/MatMul_5_grad/MatMul_1/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/MatMul_grad/MatMul_1/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/RMSprop/gradients/net/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/RMSprop/gradients/net/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/RMSprop/gradients/net/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/mul_3_grad/Mul/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/mul_4_grad/Mul/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/RMSprop/gradients/net/while/mul_5_grad/Mul_1/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/RMSprop/gradients/net/while/mul_6_grad/Mul/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/mul_6_grad/Mul_1/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/RMSprop/gradients/net/while/mul_7_grad/Mul/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/mul_7_grad/Mul_1/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/sub_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_6"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/AddN_1"
  op: "AddN"
  input: "training/RMSprop/gradients/net/while/Merge_3_grad/Switch:1"
  input: "training/RMSprop/gradients/net/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_6_grad/Shape"
  op: "Shape"
  input: "net/while/mul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_6_grad/Shape_1"
  op: "Shape"
  input: "net/while/mul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_6_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/net/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/net/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_6"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_6_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_6_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/add_6_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_6_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/add_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_6_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/add_6_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/net/while/add_6_grad/Shape"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/add_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/add_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_6_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/add_6_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_6_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_6_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/add_6_grad/BroadcastGradientArgs/Enter_1"
  input: "training/RMSprop/gradients/net/while/add_6_grad/Shape_1"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_6_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/AddN_1"
  input: "training/RMSprop/gradients/net/while/add_6_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_6_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/add_6_grad/Sum"
  input: "training/RMSprop/gradients/net/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_6"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_6_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/AddN_1"
  input: "training/RMSprop/gradients/net/while/add_6_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_6_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/add_6_grad/Sum_1"
  input: "training/RMSprop/gradients/net/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_6"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/Shape"
  op: "Shape"
  input: "net/while/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/Shape_1"
  op: "Shape"
  input: "net/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/Shape"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/Enter_1"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/Shape_1"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/Mul"
  op: "Mul"
  input: "training/RMSprop/gradients/net/while/add_6_grad/Reshape"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Identity_3"
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Identity_3"
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/Mul/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/Mul/Enter"
  input: "net/while/Identity_3"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/Mul/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/Mul"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/Sum"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/Mul_1"
  op: "Mul"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/Mul_1/StackPopV2"
  input: "training/RMSprop/gradients/net/while/add_6_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/Mul_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/Mul_1/Enter"
  input: "net/while/clip_by_value"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/Mul_1/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/Mul_1"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/Sum_1"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/Shape"
  op: "Shape"
  input: "net/while/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/Shape_1"
  op: "Shape"
  input: "net/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/Shape"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/Enter_1"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/Shape_1"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/Mul"
  op: "Mul"
  input: "training/RMSprop/gradients/net/while/add_6_grad/Reshape_1"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_5"
        s: "loc:@net/while/mul_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_5"
        s: "loc:@net/while/mul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/Mul/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/Mul/Enter"
  input: "net/while/add_5"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/Mul/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/Mul"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/Sum"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/Mul_1"
  op: "Mul"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/Mul_1/StackPopV2"
  input: "training/RMSprop/gradients/net/while/add_6_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
        s: "loc:@net/while/sub"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
        s: "loc:@net/while/sub"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/Mul_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/Mul_1/Enter"
  input: "net/while/sub"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/Mul_1/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/Mul_1"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/Sum_1"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/net/while/Merge_2_grad/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/sub_grad/Shape"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/sub"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/sub_grad/Shape_1"
  op: "Shape"
  input: "net/while/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/sub"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/net/while/sub_grad/Shape"
  input: "training/RMSprop/gradients/net/while/sub_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/sub"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/sub_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/sub"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/sub_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/sub_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/sub"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/sub_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/sub_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/sub"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/sub_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/sub_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/net/while/sub_grad/Shape_1"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/sub"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/sub_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/sub_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/sub"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/sub_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/sub_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/sub"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/sub_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/Reshape"
  input: "training/RMSprop/gradients/net/while/sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/sub"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/sub_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/sub_grad/Sum"
  input: "training/RMSprop/gradients/net/while/sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/sub"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/sub_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/Reshape"
  input: "training/RMSprop/gradients/net/while/sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/sub"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/sub_grad/Neg"
  op: "Neg"
  input: "training/RMSprop/gradients/net/while/sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/sub"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/sub_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/sub_grad/Neg"
  input: "training/RMSprop/gradients/net/while/sub_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/sub"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_5_grad/Shape"
  op: "Shape"
  input: "net/while/BiasAdd_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_5_grad/Shape_1"
  op: "Shape"
  input: "net/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_5"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/net/while/add_5_grad/Shape"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/Enter_1"
  input: "training/RMSprop/gradients/net/while/add_5_grad/Shape_1"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_5_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/Reshape_1"
  input: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_5_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/add_5_grad/Sum"
  input: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_5"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_5_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/Reshape_1"
  input: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_5_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/add_5_grad/Sum_1"
  input: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_5"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/AddN_2"
  op: "AddN"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/Reshape"
  input: "training/RMSprop/gradients/net/while/sub_grad/Reshape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_grad/Shape"
  op: "Shape"
  input: "net/while/clip_by_value/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_grad/Shape_1"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_grad/Shape_2"
  op: "Shape"
  input: "training/RMSprop/gradients/AddN_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_grad/zeros/Const"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_grad/zeros"
  op: "Fill"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/Shape_2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/GreaterEqual/Enter"
  input: "net/while/clip_by_value/Minimum"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/Shape"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_grad/Select"
  op: "Select"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/GreaterEqual"
  input: "training/RMSprop/gradients/AddN_2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_grad/Select_1"
  op: "Select"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/GreaterEqual"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/zeros"
  input: "training/RMSprop/gradients/AddN_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/Select"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/Sum"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/Select_1"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/Sum_1"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/BiasAdd_2_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/RMSprop/gradients/net/while/add_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/BiasAdd_2"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_5_grad/MatMul"
  op: "MatMul"
  input: "training/RMSprop/gradients/net/while/add_5_grad/Reshape_1"
  input: "training/RMSprop/gradients/net/while/MatMul_5_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_5"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_5_grad/MatMul/Enter"
  op: "Enter"
  input: "net/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_5_grad/MatMul_1"
  op: "MatMul"
  input: "training/RMSprop/gradients/net/while/MatMul_5_grad/MatMul_1/StackPopV2"
  input: "training/RMSprop/gradients/net/while/add_5_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_5"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_5_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_5"
        s: "loc:@net/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_5_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/MatMul_5_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_5"
        s: "loc:@net/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_5_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/MatMul_5_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_5_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/MatMul_5_grad/MatMul_1/Enter"
  input: "net/while/mul_5"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_5_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/MatMul_5_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_5_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/MatMul_5_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/Shape"
  op: "Shape"
  input: "net/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/zeros"
  op: "Fill"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/Shape_2"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_2"
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_2"
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/LessEqual/Enter"
  input: "net/while/add_2"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/Shape"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/Select"
  op: "Select"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/LessEqual"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/Reshape"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/Select_1"
  op: "Select"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/LessEqual"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/zeros"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/Select"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/Sum"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/Select_1"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/Sum_1"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_2_grad/MatMul"
  op: "MatMul"
  input: "training/RMSprop/gradients/net/while/add_5_grad/Reshape"
  input: "training/RMSprop/gradients/net/while/MatMul_2_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_2_grad/MatMul/Enter"
  op: "Enter"
  input: "net/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_2_grad/MatMul_1"
  op: "MatMul"
  input: "training/RMSprop/gradients/net/while/MatMul_2_grad/MatMul_1/StackPopV2"
  input: "training/RMSprop/gradients/net/while/add_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_2_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_2"
        s: "loc:@net/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_2_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/MatMul_2_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_2"
        s: "loc:@net/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_2_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/MatMul_2_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_2_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/MatMul_2_grad/MatMul_1/Enter"
  input: "net/while/mul_2"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_2_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/MatMul_2_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_2_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/MatMul_2_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/BiasAdd_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/BiasAdd_2/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/BiasAdd_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/BiasAdd_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/BiasAdd_2/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/BiasAdd_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/RMSprop/gradients/net/while/BiasAdd_2/Enter_grad/b_acc_1"
  input: "training/RMSprop/gradients/net/while/BiasAdd_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/BiasAdd_2/Enter_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/net/while/BiasAdd_2/Enter_grad/b_acc_2"
  input: "training/RMSprop/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/BiasAdd_2/Enter_grad/Add"
  op: "Add"
  input: "training/RMSprop/gradients/net/while/BiasAdd_2/Enter_grad/Switch:1"
  input: "training/RMSprop/gradients/net/while/BiasAdd_2_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/BiasAdd_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/net/while/BiasAdd_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/BiasAdd_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/RMSprop/gradients/net/while/BiasAdd_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/Shape"
  op: "Shape"
  input: "net/while/clip_by_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/Shape_1"
  op: "Shape"
  input: "net/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_5"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/Shape"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/Enter_1"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/Shape_1"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/Mul"
  op: "Mul"
  input: "training/RMSprop/gradients/net/while/MatMul_5_grad/MatMul"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_5"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/Mul"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/Sum"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_5"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/Mul_1"
  op: "Mul"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/Mul_1/StackPopV2"
  input: "training/RMSprop/gradients/net/while/MatMul_5_grad/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_5"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
        s: "loc:@net/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
        s: "loc:@net/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/Mul_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/Mul_1/Enter"
  input: "net/while/clip_by_value_1"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/Mul_1/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/Mul_1"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/Sum_1"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_5"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_5/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_5/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_5/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/MatMul_5/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_5/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_5/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/RMSprop/gradients/net/while/MatMul_5/Enter_grad/b_acc_1"
  input: "training/RMSprop/gradients/net/while/MatMul_5/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_5/Enter_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/net/while/MatMul_5/Enter_grad/b_acc_2"
  input: "training/RMSprop/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_5/Enter_grad/Add"
  op: "Add"
  input: "training/RMSprop/gradients/net/while/MatMul_5/Enter_grad/Switch:1"
  input: "training/RMSprop/gradients/net/while/MatMul_5_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_5/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/net/while/MatMul_5/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_5/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/RMSprop/gradients/net/while/MatMul_5/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_2_grad/Shape"
  op: "Shape"
  input: "net/while/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_2_grad/Shape_1"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/net/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/net/while/add_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/add_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/add_2_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/net/while/add_2_grad/Shape"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_2_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/Reshape"
  input: "training/RMSprop/gradients/net/while/add_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_2_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/add_2_grad/Sum"
  input: "training/RMSprop/gradients/net/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_2_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/Reshape"
  input: "training/RMSprop/gradients/net/while/add_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/add_2_grad/Sum_1"
  input: "training/RMSprop/gradients/net/while/add_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 13
          }
          dim {
            size: 20
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/MatMul_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/RMSprop/gradients/net/while/MatMul_2/Enter_grad/b_acc_1"
  input: "training/RMSprop/gradients/net/while/MatMul_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_2/Enter_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/net/while/MatMul_2/Enter_grad/b_acc_2"
  input: "training/RMSprop/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_2/Enter_grad/Add"
  op: "Add"
  input: "training/RMSprop/gradients/net/while/MatMul_2/Enter_grad/Switch:1"
  input: "training/RMSprop/gradients/net/while/MatMul_2_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/net/while/MatMul_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/RMSprop/gradients/net/while/MatMul_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/strided_slice_8_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/strided_slice_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 60
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/strided_slice_8_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/RMSprop/gradients/net/strided_slice_8_grad/Shape"
  input: "net/strided_slice_8/stack"
  input: "net/strided_slice_8/stack_1"
  input: "net/strided_slice_8/stack_2"
  input: "training/RMSprop/gradients/net/while/BiasAdd_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/strided_slice_8"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/Shape"
  op: "Shape"
  input: "net/while/clip_by_value_1/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/Shape_1"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/Shape_2"
  op: "Shape"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/zeros/Const"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/zeros"
  op: "Fill"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/Shape_2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/GreaterEqual/Enter"
  input: "net/while/clip_by_value_1/Minimum"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/Shape"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/Select"
  op: "Select"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/GreaterEqual"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/Reshape"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/Select_1"
  op: "Select"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/GreaterEqual"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/zeros"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/Select"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/Sum"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/Select_1"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/Sum_1"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/strided_slice_5_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/strided_slice_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\024\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/strided_slice_5_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/RMSprop/gradients/net/strided_slice_5_grad/Shape"
  input: "net/strided_slice_5/stack"
  input: "net/strided_slice_5/stack_1"
  input: "net/strided_slice_5/stack_2"
  input: "training/RMSprop/gradients/net/while/MatMul_5/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/strided_slice_5"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_3_grad/Shape"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_3_grad/Shape_1"
  op: "Shape"
  input: "net/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/net/while/mul_3_grad/Shape"
  input: "training/RMSprop/gradients/net/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/mul_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/mul_3_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/net/while/mul_3_grad/Shape_1"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_3_grad/Mul"
  op: "Mul"
  input: "training/RMSprop/gradients/net/while/add_2_grad/Reshape"
  input: "training/RMSprop/gradients/net/while/mul_3_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_3_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_1"
        s: "loc:@net/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_3_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/mul_3_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_1"
        s: "loc:@net/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_3_grad/Mul/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_3_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_3_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/mul_3_grad/Mul/Enter"
  input: "net/while/add_1"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_3_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/mul_3_grad/Mul/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_3_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_3_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_3_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/mul_3_grad/Mul"
  input: "training/RMSprop/gradients/net/while/mul_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_3_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/mul_3_grad/Sum"
  input: "training/RMSprop/gradients/net/while/mul_3_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_3_grad/Mul_1"
  op: "Mul"
  input: "training/RMSprop/gradients/net/while/mul_3_grad/Mul_1/Const"
  input: "training/RMSprop/gradients/net/while/add_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_3_grad/Mul_1/Const"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.2
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_3_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/mul_3_grad/Mul_1"
  input: "training/RMSprop/gradients/net/while/mul_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/mul_3_grad/Sum_1"
  input: "training/RMSprop/gradients/net/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/strided_slice_4_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/strided_slice_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\r\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/strided_slice_4_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/RMSprop/gradients/net/strided_slice_4_grad/Shape"
  input: "net/strided_slice_4/stack"
  input: "net/strided_slice_4/stack_1"
  input: "net/strided_slice_4/stack_2"
  input: "training/RMSprop/gradients/net/while/MatMul_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/strided_slice_4"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/Shape"
  op: "Shape"
  input: "net/while/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/zeros"
  op: "Fill"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/Shape_2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_4"
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_4"
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  input: "net/while/add_4"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/Shape"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/Select"
  op: "Select"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/LessEqual"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/Reshape"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/Select_1"
  op: "Select"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/LessEqual"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/zeros"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/Select"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/Sum"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/Select_1"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/Sum_1"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_1_grad/Shape"
  op: "Shape"
  input: "net/while/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_1_grad/Shape_1"
  op: "Shape"
  input: "net/while/MatMul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/net/while/add_1_grad/Shape"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs/Enter_1"
  input: "training/RMSprop/gradients/net/while/add_1_grad/Shape_1"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_1_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/mul_3_grad/Reshape_1"
  input: "training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_1_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/add_1_grad/Sum"
  input: "training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_1_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/mul_3_grad/Reshape_1"
  input: "training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/add_1_grad/Sum_1"
  input: "training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_4_grad/Shape"
  op: "Shape"
  input: "net/while/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_4_grad/Shape_1"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/net/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/net/while/add_4_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/add_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/add_4_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/net/while/add_4_grad/Shape"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_4_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/Reshape"
  input: "training/RMSprop/gradients/net/while/add_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_4_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/add_4_grad/Sum"
  input: "training/RMSprop/gradients/net/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_4_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/Reshape"
  input: "training/RMSprop/gradients/net/while/add_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/add_4_grad/Sum_1"
  input: "training/RMSprop/gradients/net/while/add_4_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/RMSprop/gradients/net/while/add_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_3_grad/MatMul"
  op: "MatMul"
  input: "training/RMSprop/gradients/net/while/add_1_grad/Reshape_1"
  input: "training/RMSprop/gradients/net/while/MatMul_3_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_3_grad/MatMul/Enter"
  op: "Enter"
  input: "net/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_3_grad/MatMul_1"
  op: "MatMul"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/Mul/StackPopV2"
  input: "training/RMSprop/gradients/net/while/add_1_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_4_grad/Shape"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_4_grad/Shape_1"
  op: "Shape"
  input: "net/while/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/net/while/mul_4_grad/Shape"
  input: "training/RMSprop/gradients/net/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/mul_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/mul_4_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/net/while/mul_4_grad/Shape_1"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_4_grad/Mul"
  op: "Mul"
  input: "training/RMSprop/gradients/net/while/add_4_grad/Reshape"
  input: "training/RMSprop/gradients/net/while/mul_4_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_4_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_3"
        s: "loc:@net/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_4_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/mul_4_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_3"
        s: "loc:@net/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_4_grad/Mul/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_4_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_4_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/mul_4_grad/Mul/Enter"
  input: "net/while/add_3"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_4_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/mul_4_grad/Mul/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_4_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_4_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_4_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/mul_4_grad/Mul"
  input: "training/RMSprop/gradients/net/while/mul_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_4_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/mul_4_grad/Sum"
  input: "training/RMSprop/gradients/net/while/mul_4_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_4_grad/Mul_1"
  op: "Mul"
  input: "training/RMSprop/gradients/net/while/mul_4_grad/Mul_1/Const"
  input: "training/RMSprop/gradients/net/while/add_4_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_4_grad/Mul_1/Const"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.2
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_4_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/mul_4_grad/Mul_1"
  input: "training/RMSprop/gradients/net/while/mul_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/mul_4_grad/Sum_1"
  input: "training/RMSprop/gradients/net/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/RMSprop/gradients/net/while/add_1_grad/Reshape"
  input: "training/RMSprop/gradients/net/while/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "net/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "training/RMSprop/gradients/net/while/MatMul_grad/MatMul_1/StackPopV2"
  input: "training/RMSprop/gradients/net/while/add_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul"
        s: "loc:@net/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/MatMul_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul"
        s: "loc:@net/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/MatMul_grad/MatMul_1/Enter"
  input: "net/while/mul"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/BiasAdd/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/BiasAdd/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/RMSprop/gradients/net/while/BiasAdd/Enter_grad/b_acc_1"
  input: "training/RMSprop/gradients/net/while/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/net/while/BiasAdd/Enter_grad/b_acc_2"
  input: "training/RMSprop/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "training/RMSprop/gradients/net/while/BiasAdd/Enter_grad/Switch:1"
  input: "training/RMSprop/gradients/net/while/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/net/while/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/RMSprop/gradients/net/while/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/MatMul_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/RMSprop/gradients/net/while/MatMul_3/Enter_grad/b_acc_1"
  input: "training/RMSprop/gradients/net/while/MatMul_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_3/Enter_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/net/while/MatMul_3/Enter_grad/b_acc_2"
  input: "training/RMSprop/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_3/Enter_grad/Add"
  op: "Add"
  input: "training/RMSprop/gradients/net/while/MatMul_3/Enter_grad/Switch:1"
  input: "training/RMSprop/gradients/net/while/MatMul_3_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/net/while/MatMul_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/RMSprop/gradients/net/while/MatMul_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_3_grad/Shape"
  op: "Shape"
  input: "net/while/BiasAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_3_grad/Shape_1"
  op: "Shape"
  input: "net/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/net/while/add_3_grad/Shape"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs/Enter_1"
  input: "training/RMSprop/gradients/net/while/add_3_grad/Shape_1"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_3_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/mul_4_grad/Reshape_1"
  input: "training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_3_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/add_3_grad/Sum"
  input: "training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_3_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/mul_4_grad/Reshape_1"
  input: "training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/add_3_grad/Sum_1"
  input: "training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 13
          }
          dim {
            size: 20
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/RMSprop/gradients/net/while/MatMul/Enter_grad/b_acc_1"
  input: "training/RMSprop/gradients/net/while/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/net/while/MatMul/Enter_grad/b_acc_2"
  input: "training/RMSprop/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul/Enter_grad/Add"
  op: "Add"
  input: "training/RMSprop/gradients/net/while/MatMul/Enter_grad/Switch:1"
  input: "training/RMSprop/gradients/net/while/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/net/while/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/RMSprop/gradients/net/while/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/strided_slice_6_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/strided_slice_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 60
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/strided_slice_6_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/RMSprop/gradients/net/strided_slice_6_grad/Shape"
  input: "net/strided_slice_6/stack"
  input: "net/strided_slice_6/stack_1"
  input: "net/strided_slice_6/stack_2"
  input: "training/RMSprop/gradients/net/while/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/strided_slice_6"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/strided_slice_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/strided_slice_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\024\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/strided_slice_1_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/RMSprop/gradients/net/strided_slice_1_grad/Shape"
  input: "net/strided_slice_1/stack"
  input: "net/strided_slice_1/stack_1"
  input: "net/strided_slice_1/stack_2"
  input: "training/RMSprop/gradients/net/while/MatMul_3/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/strided_slice_1"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/BiasAdd_1_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/RMSprop/gradients/net/while/add_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/BiasAdd_1"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_4_grad/MatMul"
  op: "MatMul"
  input: "training/RMSprop/gradients/net/while/add_3_grad/Reshape_1"
  input: "training/RMSprop/gradients/net/while/MatMul_4_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_4"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_4_grad/MatMul/Enter"
  op: "Enter"
  input: "net/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_4_grad/MatMul_1"
  op: "MatMul"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/Mul/StackPopV2"
  input: "training/RMSprop/gradients/net/while/add_3_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_4"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/strided_slice_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/strided_slice"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\r\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/strided_slice_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/RMSprop/gradients/net/strided_slice_grad/Shape"
  input: "net/strided_slice/stack"
  input: "net/strided_slice/stack_1"
  input: "net/strided_slice/stack_2"
  input: "training/RMSprop/gradients/net/while/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/strided_slice"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_1_grad/MatMul"
  op: "MatMul"
  input: "training/RMSprop/gradients/net/while/add_3_grad/Reshape"
  input: "training/RMSprop/gradients/net/while/MatMul_1_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_1_grad/MatMul/Enter"
  op: "Enter"
  input: "net/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_1_grad/MatMul_1"
  op: "MatMul"
  input: "training/RMSprop/gradients/net/while/MatMul_1_grad/MatMul_1/StackPopV2"
  input: "training/RMSprop/gradients/net/while/add_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_1_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_1"
        s: "loc:@net/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_1_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/MatMul_1_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_1"
        s: "loc:@net/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_1_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/MatMul_1_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_1_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/MatMul_1_grad/MatMul_1/Enter"
  input: "net/while/mul_1"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_1_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/MatMul_1_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_1_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/MatMul_1_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/BiasAdd_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/BiasAdd_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/BiasAdd_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/BiasAdd_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/BiasAdd_1/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/BiasAdd_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/RMSprop/gradients/net/while/BiasAdd_1/Enter_grad/b_acc_1"
  input: "training/RMSprop/gradients/net/while/BiasAdd_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/BiasAdd_1/Enter_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/net/while/BiasAdd_1/Enter_grad/b_acc_2"
  input: "training/RMSprop/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/BiasAdd_1/Enter_grad/Add"
  op: "Add"
  input: "training/RMSprop/gradients/net/while/BiasAdd_1/Enter_grad/Switch:1"
  input: "training/RMSprop/gradients/net/while/BiasAdd_1_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/BiasAdd_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/net/while/BiasAdd_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/BiasAdd_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/RMSprop/gradients/net/while/BiasAdd_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/AddN_3"
  op: "AddN"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/Reshape_1"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/Reshape_1"
  input: "training/RMSprop/gradients/net/while/MatMul_3_grad/MatMul"
  input: "training/RMSprop/gradients/net/while/MatMul_4_grad/MatMul"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_4/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_4/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_4/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/MatMul_4/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_4/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_4/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/RMSprop/gradients/net/while/MatMul_4/Enter_grad/b_acc_1"
  input: "training/RMSprop/gradients/net/while/MatMul_4/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_4/Enter_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/net/while/MatMul_4/Enter_grad/b_acc_2"
  input: "training/RMSprop/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_4/Enter_grad/Add"
  op: "Add"
  input: "training/RMSprop/gradients/net/while/MatMul_4/Enter_grad/Switch:1"
  input: "training/RMSprop/gradients/net/while/MatMul_4_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_4/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/net/while/MatMul_4/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_4/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/RMSprop/gradients/net/while/MatMul_4/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 13
          }
          dim {
            size: 20
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/MatMul_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/RMSprop/gradients/net/while/MatMul_1/Enter_grad/b_acc_1"
  input: "training/RMSprop/gradients/net/while/MatMul_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_1/Enter_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/net/while/MatMul_1/Enter_grad/b_acc_2"
  input: "training/RMSprop/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_1/Enter_grad/Add"
  op: "Add"
  input: "training/RMSprop/gradients/net/while/MatMul_1/Enter_grad/Switch:1"
  input: "training/RMSprop/gradients/net/while/MatMul_1_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/net/while/MatMul_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/RMSprop/gradients/net/while/MatMul_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/strided_slice_7_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/strided_slice_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 60
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/strided_slice_7_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/RMSprop/gradients/net/strided_slice_7_grad/Shape"
  input: "net/strided_slice_7/stack"
  input: "net/strided_slice_7/stack_1"
  input: "net/strided_slice_7/stack_2"
  input: "training/RMSprop/gradients/net/while/BiasAdd_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/strided_slice_7"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/AddN_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/strided_slice_3_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/strided_slice_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\024\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/strided_slice_3_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/RMSprop/gradients/net/strided_slice_3_grad/Shape"
  input: "net/strided_slice_3/stack"
  input: "net/strided_slice_3/stack_1"
  input: "net/strided_slice_3/stack_2"
  input: "training/RMSprop/gradients/net/while/MatMul_4/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/strided_slice_3"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/strided_slice_2_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/strided_slice_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\r\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/strided_slice_2_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/RMSprop/gradients/net/strided_slice_2_grad/Shape"
  input: "net/strided_slice_2/stack"
  input: "net/strided_slice_2/stack_1"
  input: "net/strided_slice_2/stack_2"
  input: "training/RMSprop/gradients/net/while/MatMul_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/strided_slice_2"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/RMSprop/gradients/AddN_4"
  op: "AddN"
  input: "training/RMSprop/gradients/net/strided_slice_8_grad/StridedSliceGrad"
  input: "training/RMSprop/gradients/net/strided_slice_6_grad/StridedSliceGrad"
  input: "training/RMSprop/gradients/net/strided_slice_7_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/strided_slice_8"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/AddN_5"
  op: "AddN"
  input: "training/RMSprop/gradients/net/strided_slice_5_grad/StridedSliceGrad"
  input: "training/RMSprop/gradients/net/strided_slice_1_grad/StridedSliceGrad"
  input: "training/RMSprop/gradients/net/strided_slice_3_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/strided_slice_5"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/AddN_6"
  op: "AddN"
  input: "training/RMSprop/gradients/net/strided_slice_4_grad/StridedSliceGrad"
  input: "training/RMSprop/gradients/net/strided_slice_grad/StridedSliceGrad"
  input: "training/RMSprop/gradients/net/strided_slice_2_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/strided_slice_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/zeros"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 13
          }
          dim {
            size: 60
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/Variable"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 13
        }
        dim {
          size: 60
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/Variable/Assign"
  op: "Assign"
  input: "training/RMSprop/Variable"
  input: "training/RMSprop/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/Variable/read"
  op: "Identity"
  input: "training/RMSprop/Variable"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable"
      }
    }
  }
}
node {
  name: "training/RMSprop/zeros_1/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\024\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "training/RMSprop/zeros_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/zeros_1"
  op: "Fill"
  input: "training/RMSprop/zeros_1/shape_as_tensor"
  input: "training/RMSprop/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/Variable_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
        dim {
          size: 60
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/Variable_1/Assign"
  op: "Assign"
  input: "training/RMSprop/Variable_1"
  input: "training/RMSprop/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/Variable_1/read"
  op: "Identity"
  input: "training/RMSprop/Variable_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/zeros_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 60
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/Variable_2"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 60
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/Variable_2/Assign"
  op: "Assign"
  input: "training/RMSprop/Variable_2"
  input: "training/RMSprop/zeros_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/Variable_2/read"
  op: "Identity"
  input: "training/RMSprop/Variable_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/zeros_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/Variable_3"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/Variable_3/Assign"
  op: "Assign"
  input: "training/RMSprop/Variable_3"
  input: "training/RMSprop/zeros_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_3"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/Variable_3/read"
  op: "Identity"
  input: "training/RMSprop/Variable_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/zeros_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/Variable_4"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/Variable_4/Assign"
  op: "Assign"
  input: "training/RMSprop/Variable_4"
  input: "training/RMSprop/zeros_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_4"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/Variable_4/read"
  op: "Identity"
  input: "training/RMSprop/Variable_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/AssignAdd/value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "training/RMSprop/AssignAdd"
  op: "AssignAdd"
  input: "RMSprop/iterations"
  input: "training/RMSprop/AssignAdd/value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/iterations"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/mul"
  op: "Mul"
  input: "RMSprop/rho/read"
  input: "training/RMSprop/Variable/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/RMSprop/sub"
  op: "Sub"
  input: "training/RMSprop/sub/x"
  input: "RMSprop/rho/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Square"
  op: "Square"
  input: "training/RMSprop/gradients/AddN_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/mul_1"
  op: "Mul"
  input: "training/RMSprop/sub"
  input: "training/RMSprop/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/add"
  op: "Add"
  input: "training/RMSprop/mul"
  input: "training/RMSprop/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Assign"
  op: "Assign"
  input: "training/RMSprop/Variable"
  input: "training/RMSprop/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/mul_2"
  op: "Mul"
  input: "RMSprop/lr/read"
  input: "training/RMSprop/gradients/AddN_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/RMSprop/clip_by_value/Minimum"
  op: "Minimum"
  input: "training/RMSprop/add"
  input: "training/RMSprop/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/clip_by_value"
  op: "Maximum"
  input: "training/RMSprop/clip_by_value/Minimum"
  input: "training/RMSprop/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Sqrt"
  op: "Sqrt"
  input: "training/RMSprop/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/add_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1e-07
      }
    }
  }
}
node {
  name: "training/RMSprop/add_1"
  op: "Add"
  input: "training/RMSprop/Sqrt"
  input: "training/RMSprop/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/truediv"
  op: "RealDiv"
  input: "training/RMSprop/mul_2"
  input: "training/RMSprop/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/sub_1"
  op: "Sub"
  input: "net/kernel/read"
  input: "training/RMSprop/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Assign_1"
  op: "Assign"
  input: "net/kernel"
  input: "training/RMSprop/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/mul_3"
  op: "Mul"
  input: "RMSprop/rho/read"
  input: "training/RMSprop/Variable_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/sub_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/RMSprop/sub_2"
  op: "Sub"
  input: "training/RMSprop/sub_2/x"
  input: "RMSprop/rho/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Square_1"
  op: "Square"
  input: "training/RMSprop/gradients/AddN_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/mul_4"
  op: "Mul"
  input: "training/RMSprop/sub_2"
  input: "training/RMSprop/Square_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/add_2"
  op: "Add"
  input: "training/RMSprop/mul_3"
  input: "training/RMSprop/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Assign_2"
  op: "Assign"
  input: "training/RMSprop/Variable_1"
  input: "training/RMSprop/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/mul_5"
  op: "Mul"
  input: "RMSprop/lr/read"
  input: "training/RMSprop/gradients/AddN_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/RMSprop/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "training/RMSprop/add_2"
  input: "training/RMSprop/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/clip_by_value_1"
  op: "Maximum"
  input: "training/RMSprop/clip_by_value_1/Minimum"
  input: "training/RMSprop/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Sqrt_1"
  op: "Sqrt"
  input: "training/RMSprop/clip_by_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/add_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1e-07
      }
    }
  }
}
node {
  name: "training/RMSprop/add_3"
  op: "Add"
  input: "training/RMSprop/Sqrt_1"
  input: "training/RMSprop/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/truediv_1"
  op: "RealDiv"
  input: "training/RMSprop/mul_5"
  input: "training/RMSprop/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/sub_3"
  op: "Sub"
  input: "net/recurrent_kernel/read"
  input: "training/RMSprop/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Assign_3"
  op: "Assign"
  input: "net/recurrent_kernel"
  input: "training/RMSprop/sub_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/mul_6"
  op: "Mul"
  input: "RMSprop/rho/read"
  input: "training/RMSprop/Variable_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/sub_4/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/RMSprop/sub_4"
  op: "Sub"
  input: "training/RMSprop/sub_4/x"
  input: "RMSprop/rho/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Square_2"
  op: "Square"
  input: "training/RMSprop/gradients/AddN_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/mul_7"
  op: "Mul"
  input: "training/RMSprop/sub_4"
  input: "training/RMSprop/Square_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/add_4"
  op: "Add"
  input: "training/RMSprop/mul_6"
  input: "training/RMSprop/mul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Assign_4"
  op: "Assign"
  input: "training/RMSprop/Variable_2"
  input: "training/RMSprop/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/mul_8"
  op: "Mul"
  input: "RMSprop/lr/read"
  input: "training/RMSprop/gradients/AddN_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/RMSprop/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "training/RMSprop/add_4"
  input: "training/RMSprop/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/clip_by_value_2"
  op: "Maximum"
  input: "training/RMSprop/clip_by_value_2/Minimum"
  input: "training/RMSprop/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Sqrt_2"
  op: "Sqrt"
  input: "training/RMSprop/clip_by_value_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/add_5/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1e-07
      }
    }
  }
}
node {
  name: "training/RMSprop/add_5"
  op: "Add"
  input: "training/RMSprop/Sqrt_2"
  input: "training/RMSprop/add_5/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/truediv_2"
  op: "RealDiv"
  input: "training/RMSprop/mul_8"
  input: "training/RMSprop/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/sub_5"
  op: "Sub"
  input: "net/bias/read"
  input: "training/RMSprop/truediv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Assign_5"
  op: "Assign"
  input: "net/bias"
  input: "training/RMSprop/sub_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/mul_9"
  op: "Mul"
  input: "RMSprop/rho/read"
  input: "training/RMSprop/Variable_3/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/sub_6/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/RMSprop/sub_6"
  op: "Sub"
  input: "training/RMSprop/sub_6/x"
  input: "RMSprop/rho/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Square_3"
  op: "Square"
  input: "training/RMSprop/gradients/dense_1/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/mul_10"
  op: "Mul"
  input: "training/RMSprop/sub_6"
  input: "training/RMSprop/Square_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/add_6"
  op: "Add"
  input: "training/RMSprop/mul_9"
  input: "training/RMSprop/mul_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Assign_6"
  op: "Assign"
  input: "training/RMSprop/Variable_3"
  input: "training/RMSprop/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_3"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/mul_11"
  op: "Mul"
  input: "RMSprop/lr/read"
  input: "training/RMSprop/gradients/dense_1/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Const_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/Const_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/RMSprop/clip_by_value_3/Minimum"
  op: "Minimum"
  input: "training/RMSprop/add_6"
  input: "training/RMSprop/Const_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/clip_by_value_3"
  op: "Maximum"
  input: "training/RMSprop/clip_by_value_3/Minimum"
  input: "training/RMSprop/Const_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Sqrt_3"
  op: "Sqrt"
  input: "training/RMSprop/clip_by_value_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/add_7/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1e-07
      }
    }
  }
}
node {
  name: "training/RMSprop/add_7"
  op: "Add"
  input: "training/RMSprop/Sqrt_3"
  input: "training/RMSprop/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/truediv_3"
  op: "RealDiv"
  input: "training/RMSprop/mul_11"
  input: "training/RMSprop/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/sub_7"
  op: "Sub"
  input: "dense_1/kernel/read"
  input: "training/RMSprop/truediv_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Assign_7"
  op: "Assign"
  input: "dense_1/kernel"
  input: "training/RMSprop/sub_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/mul_12"
  op: "Mul"
  input: "RMSprop/rho/read"
  input: "training/RMSprop/Variable_4/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/sub_8/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/RMSprop/sub_8"
  op: "Sub"
  input: "training/RMSprop/sub_8/x"
  input: "RMSprop/rho/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Square_4"
  op: "Square"
  input: "training/RMSprop/gradients/dense_1/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/mul_13"
  op: "Mul"
  input: "training/RMSprop/sub_8"
  input: "training/RMSprop/Square_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/add_8"
  op: "Add"
  input: "training/RMSprop/mul_12"
  input: "training/RMSprop/mul_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Assign_8"
  op: "Assign"
  input: "training/RMSprop/Variable_4"
  input: "training/RMSprop/add_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_4"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/mul_14"
  op: "Mul"
  input: "RMSprop/lr/read"
  input: "training/RMSprop/gradients/dense_1/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Const_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/Const_9"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/RMSprop/clip_by_value_4/Minimum"
  op: "Minimum"
  input: "training/RMSprop/add_8"
  input: "training/RMSprop/Const_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/clip_by_value_4"
  op: "Maximum"
  input: "training/RMSprop/clip_by_value_4/Minimum"
  input: "training/RMSprop/Const_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Sqrt_4"
  op: "Sqrt"
  input: "training/RMSprop/clip_by_value_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/add_9/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1e-07
      }
    }
  }
}
node {
  name: "training/RMSprop/add_9"
  op: "Add"
  input: "training/RMSprop/Sqrt_4"
  input: "training/RMSprop/add_9/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/truediv_4"
  op: "RealDiv"
  input: "training/RMSprop/mul_14"
  input: "training/RMSprop/add_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/sub_9"
  op: "Sub"
  input: "dense_1/bias/read"
  input: "training/RMSprop/truediv_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Assign_9"
  op: "Assign"
  input: "dense_1/bias"
  input: "training/RMSprop/sub_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/group_deps"
  op: "NoOp"
  input: "^loss/mul"
  input: "^metrics/acc/Mean_1"
  input: "^training/RMSprop/Assign"
  input: "^training/RMSprop/AssignAdd"
  input: "^training/RMSprop/Assign_1"
  input: "^training/RMSprop/Assign_2"
  input: "^training/RMSprop/Assign_3"
  input: "^training/RMSprop/Assign_4"
  input: "^training/RMSprop/Assign_5"
  input: "^training/RMSprop/Assign_6"
  input: "^training/RMSprop/Assign_7"
  input: "^training/RMSprop/Assign_8"
  input: "^training/RMSprop/Assign_9"
}
node {
  name: "IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "RMSprop/lr"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/lr"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "RMSprop/rho"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/rho"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "RMSprop/decay"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/decay"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "RMSprop/iterations"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/iterations"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "training/RMSprop/Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "training/RMSprop/Variable_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "training/RMSprop/Variable_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "training/RMSprop/Variable_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_13"
  op: "IsVariableInitialized"
  input: "training/RMSprop/Variable_4"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "init_1"
  op: "NoOp"
  input: "^RMSprop/decay/Assign"
  input: "^RMSprop/iterations/Assign"
  input: "^RMSprop/lr/Assign"
  input: "^RMSprop/rho/Assign"
  input: "^training/RMSprop/Variable/Assign"
  input: "^training/RMSprop/Variable_1/Assign"
  input: "^training/RMSprop/Variable_2/Assign"
  input: "^training/RMSprop/Variable_3/Assign"
  input: "^training/RMSprop/Variable_4/Assign"
}
node {
  name: "Placeholder_5"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 13
        }
        dim {
          size: 60
        }
      }
    }
  }
}
node {
  name: "Assign_5"
  op: "Assign"
  input: "training/RMSprop/Variable"
  input: "Placeholder_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_6"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
        dim {
          size: 60
        }
      }
    }
  }
}
node {
  name: "Assign_6"
  op: "Assign"
  input: "training/RMSprop/Variable_1"
  input: "Placeholder_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_7"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 60
        }
      }
    }
  }
}
node {
  name: "Assign_7"
  op: "Assign"
  input: "training/RMSprop/Variable_2"
  input: "Placeholder_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_8"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_8"
  op: "Assign"
  input: "training/RMSprop/Variable_3"
  input: "Placeholder_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_3"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_9"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_9"
  op: "Assign"
  input: "training/RMSprop/Variable_4"
  input: "Placeholder_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_4"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "net_output"
  op: "Identity"
  input: "dense_1/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
versions {
  producer: 27
}
